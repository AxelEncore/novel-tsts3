const fetch = require('node-fetch');

async function debugProjectsAPI() {
  const baseUrl = 'http://localhost:3000';
  let authToken = null;
  
  try {
    console.log('๐ ะจะฐะณ 1: ะะฒัะพัะธะทะฐัะธั...');
    
    // ะะฒัะพัะธะทะฐัะธั
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      })
    });
    
    const loginData = await loginResponse.json();
    console.log('๐ ะะฒัะพัะธะทะฐัะธั ััะฐััั:', loginResponse.status);
    console.log('๐ ะะฒัะพัะธะทะฐัะธั ะดะฐะฝะฝัะต:', loginData);
    
    if (!loginData.user || !loginData.token) {
      throw new Error('ะะฒัะพัะธะทะฐัะธั ะฝะต ัะดะฐะปะฐัั: ' + JSON.stringify(loginData));
    }
    
    // ะะพะปััะฐะตะผ cookies ะดะปั ะดะฐะปัะฝะตะนัะธั ะทะฐะฟัะพัะพะฒ
    const setCookies = loginResponse.headers.get('set-cookie');
    console.log('๐ช Set-Cookie header:', setCookies);
    
    const cookies = setCookies || '';
    
    console.log('\n๐ ะจะฐะณ 2: ะกะพะทะดะฐะฝะธะต ัะตััะพะฒะพะณะพ ะฟัะพะตะบัะฐ...');
    
    // ะกะพะทะดะฐะฝะธะต ะฟัะพะตะบัะฐ
    const createProjectResponse = await fetch(`${baseUrl}/api/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      },
      body: JSON.stringify({
        name: 'ะขะตัั API Debug Project',
        description: 'ะัะพะตะบั ะดะปั ะพัะปะฐะดะบะธ API',
        color: '#FF5733',
        isPrivate: false
      })
    });
    
    const createProjectData = await createProjectResponse.json();
    console.log('๐ ะกะพะทะดะฐะฝะธะต ะฟัะพะตะบัะฐ ััะฐััั:', createProjectResponse.status);
    console.log('๐ ะกะพะทะดะฐะฝะธะต ะฟัะพะตะบัะฐ ะดะฐะฝะฝัะต:', JSON.stringify(createProjectData, null, 2));
    
    console.log('\n๐ ะจะฐะณ 3: ะะพะปััะตะฝะธะต ะฒัะตั ะฟัะพะตะบัะพะฒ...');
    
    // ะะพะปััะตะฝะธะต ะฒัะตั ะฟัะพะตะบัะพะฒ
    const getProjectsResponse = await fetch(`${baseUrl}/api/projects`, {
      headers: {
        'Cookie': cookies
      }
    });
    
    const getProjectsData = await getProjectsResponse.json();
    console.log('๐ ะะพะปััะตะฝะธะต ะฟัะพะตะบัะพะฒ ััะฐััั:', getProjectsResponse.status);
    console.log('๐ ะะพะปััะตะฝะธะต ะฟัะพะตะบัะพะฒ ะดะฐะฝะฝัะต:', JSON.stringify(getProjectsData, null, 2));
    
    if (getProjectsData.success && getProjectsData.data && getProjectsData.data.projects) {
      console.log('\nโ ะะฝะฐะปะธะท ะฟะพะปััะตะฝะฝัั ะฟัะพะตะบัะพะฒ:');
      console.log(`๐ ะะพะปะธัะตััะฒะพ ะฟัะพะตะบัะพะฒ: ${getProjectsData.data.projects.length}`);
      
      getProjectsData.data.projects.forEach((project, index) => {
        console.log(`๐ ะัะพะตะบั ${index + 1}:`, {
          id: project.id ? project.id.substring(0, 8) + '...' : 'ะะะข ID',
          name: project.name || 'ะะะ ะะะะะะะะฏ',
          created_at: project.created_at || 'ะะะข ะะะขะซ'
        });
      });
      
      // ะัะตะผ ัะพะทะดะฐะฝะฝัะน ะฟัะพะตะบั
      const createdProject = getProjectsData.data.projects.find(p => 
        p.name === 'ะขะตัั API Debug Project'
      );
      
      if (createdProject) {
        console.log('โ ะกะพะทะดะฐะฝะฝัะน ะฟัะพะตะบั ะฝะฐะนะดะตะฝ ะฒ ัะฟะธัะบะต!');
        console.log('๐ ะะตัะฐะปะธ ะฝะฐะนะดะตะฝะฝะพะณะพ ะฟัะพะตะบัะฐ:', {
          id: createdProject.id,
          name: createdProject.name,
          description: createdProject.description,
          created_at: createdProject.created_at
        });
      } else {
        console.log('โ ะกะพะทะดะฐะฝะฝัะน ะฟัะพะตะบั ะะ ะฝะฐะนะดะตะฝ ะฒ ัะฟะธัะบะต!');
        console.log('๐ ะัะพะฒะตััะตะผ ะฝะฐะทะฒะฐะฝะธั ะฒัะตั ะฟัะพะตะบัะพะฒ:');
        getProjectsData.data.projects.forEach(p => {
          console.log(`  - "${p.name}"`);
        });
      }
    } else {
      console.log('โ ะะตะฟัะฐะฒะธะปัะฝัะน ัะพัะผะฐั ะพัะฒะตัะฐ ะพั API /projects');
      console.log('๐ ะกัััะบัััะฐ ะพัะฒะตัะฐ:', {
        success: getProjectsData.success,
        hasData: !!getProjectsData.data,
        hasProjects: !!(getProjectsData.data && getProjectsData.data.projects),
        dataKeys: getProjectsData.data ? Object.keys(getProjectsData.data) : 'ะฝะตั data'
      });
    }
    
    console.log('\n๐ฏ ะขะตัั ะทะฐะฒะตััะตะฝ');
    
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ัะตััะฐ:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('๐ก ะฃะฑะตะดะธัะตัั ััะพ ัะตัะฒะตั ะทะฐะฟััะตะฝ: npm run dev');
    }
    return false;
  }
}

debugProjectsAPI().then(() => {
  console.log('\n๐ ะขะตัั API ะฟัะพะตะบัะพะฒ ะทะฐะฒะตััะตะฝ');
  process.exit(0);
}).catch(error => {
  console.error('๐ฅ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error);
  process.exit(1);
});