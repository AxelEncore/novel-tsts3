require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD,
  ssl: process.env.POSTGRES_SSL === 'true' || process.env.POSTGRES_SSL === 'require' 
    ? { rejectUnauthorized: false } 
    : false,
});

// –ö–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
const DEFAULT_COLUMNS = [
  {
    title: '–ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',    // –∏—Å–ø–æ–ª—å–∑—É–µ–º title –≤–º–µ—Å—Ç–æ name
    color: '#6B7280',  // —Å–µ—Ä—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
    position: 0
  },
  {
    title: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    color: '#3B82F6',  // —Å–∏–Ω–∏–π
    position: 1
  },
  {
    title: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    color: '#8B5CF6',  // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    position: 2
  },
  {
    title: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    color: '#10B981',  // –∑–µ–ª–µ–Ω—ã–π
    position: 3
  },
  {
    title: '–û—Ç–ª–æ–∂–µ–Ω–æ',
    color: '#F59E0B',  // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    position: 4
  }
];

async function checkColumnsStructure() {
  let client;
  try {
    client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã columns
    const checkStructure = `
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'columns'
      ORDER BY ordinal_position
    `;
    
    const structure = await client.query(checkStructure);
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã columns:');
    structure.rows.forEach(row => {
      console.log(`  ${row.column_name}: ${row.data_type} (${row.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  } finally {
    if (client) {
      client.release();
    }
  }
}

async function createDefaultColumns() {
  let client;
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å–æ–∫...');
    
    client = await pool.connect();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    await checkColumnsStructure();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∫–æ–ª–æ–Ω–æ–∫
    const boardsWithoutColumns = `
      SELECT b.id, b.name, b.project_id
      FROM boards b
      LEFT JOIN columns c ON b.id = c.board_id
      WHERE c.id IS NULL
    `;
    
    const boards = await client.query(boardsWithoutColumns);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${boards.rows.length} –¥–æ—Å–æ–∫ –±–µ–∑ –∫–æ–ª–æ–Ω–æ–∫`);
    
    for (const board of boards.rows) {
      console.log(`\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å–∫–∏: ${board.name}`);
      
      for (const columnTemplate of DEFAULT_COLUMNS) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ö–µ–º—ã
        const insertColumn = `
          INSERT INTO columns (id, board_id, title, color, position, created_at, updated_at)
          VALUES (
            gen_random_uuid(),
            $1,
            $2,
            $3,
            $4,
            NOW(),
            NOW()
          )
          RETURNING id, title
        `;
        
        const result = await client.query(insertColumn, [
          board.id,
          columnTemplate.title,
          columnTemplate.color,
          columnTemplate.position
        ]);
        
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${columnTemplate.title} (${columnTemplate.color})`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const checkColumns = `
      SELECT 
        b.name as board_name,
        c.title as column_title,
        c.color,
        c.position
      FROM boards b
      JOIN columns c ON b.id = c.board_id
      ORDER BY b.name, c.position
    `;
    
    const columnsResult = await client.query(checkColumns);
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:');
    
    let currentBoard = '';
    columnsResult.rows.forEach(row => {
      if (row.board_name !== currentBoard) {
        currentBoard = row.board_name;
        console.log(`\nüìã –î–æ—Å–∫–∞: ${currentBoard}`);
      }
      console.log(`  ${row.position + 1}. ${row.column_title} (${row.color})`);
    });
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫:', error);
  } finally {
    if (client) {
      client.release();
    }
    await pool.end();
  }
}

createDefaultColumns();