const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD
});

async function createBoardColumnsTable() {
  try {
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã board_columns...');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É columns
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É columns...');
    await pool.query('DROP TABLE IF EXISTS columns CASCADE');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ columns —É–¥–∞–ª–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É board_columns
    console.log('‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É board_columns...');
    await pool.query(`
      CREATE TABLE board_columns (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        board_id UUID NOT NULL REFERENCES boards(id) ON DELETE CASCADE,
        position INTEGER DEFAULT 0,
        color VARCHAR(7),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ board_columns —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìä –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    await pool.query('CREATE INDEX idx_board_columns_board_id ON board_columns(board_id)');
    await pool.query('CREATE INDEX idx_board_columns_position ON board_columns(position)');
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É tasks, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Å—ã–ª–∞–ª–∞—Å—å –Ω–∞ board_columns
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ tasks...');
    await pool.query('ALTER TABLE tasks DROP CONSTRAINT IF EXISTS tasks_column_id_fkey');
    await pool.query('ALTER TABLE tasks ADD CONSTRAINT tasks_column_id_fkey FOREIGN KEY (column_id) REFERENCES board_columns(id)');
    console.log('‚úÖ –°—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã board_columns:');
    const result = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'board_columns' 
      ORDER BY ordinal_position
    `);
    
    result.rows.forEach(row => {
      console.log(`- ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default || 'none'})`);
    });
    
    console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ board_columns —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã board_columns:', error.message);
  } finally {
    await pool.end();
  }
}

createBoardColumnsTable();