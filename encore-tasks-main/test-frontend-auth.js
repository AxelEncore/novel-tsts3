const fetch = require('node-fetch');

async function testFrontendAuth() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
  
  try {
    // 1. –õ–æ–≥–∏–Ω–∏–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º cookies
    console.log('\n1. üîê –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω...');
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –ª–æ–≥–∏–Ω–∞:', loginResponse.status);
    
    if (!loginResponse.ok) {
      const error = await loginResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error);
      return;
    }
    
    const loginData = await loginResponse.json();
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', loginData.user?.email);
    
    // –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const cookies = loginResponse.headers.get('set-cookie');
    console.log('üç™ Cookies –ø–æ–ª—É—á–µ–Ω—ã:', cookies ? '–î–∞' : '–ù–µ—Ç');
    
    if (!cookies) {
      console.log('‚ùå Cookies –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!');
      return;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å cookies
    console.log('\n2. üÜï –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å cookies...');
    const createResponse = await fetch('http://localhost:3000/api/projects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      },
      body: JSON.stringify({
        name: 'Frontend Test Project ' + Date.now(),
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞',
        icon: 'üåê'
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è:', createResponse.status);
    
    if (createResponse.ok) {
      const newProject = await createResponse.json();
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', newProject.data?.name);
      console.log('üÜî ID –ø—Ä–æ–µ–∫—Ç–∞:', newProject.data?.id);
      
      // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å cookies
      console.log('\n3. üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å cookies...');
      const projectsResponse = await fetch('http://localhost:3000/api/projects', {
        method: 'GET',
        headers: {
          'Cookie': cookies
        }
      });
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è:', projectsResponse.status);
      
      if (projectsResponse.ok) {
        const projectsData = await projectsResponse.json();
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!');
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsData.data?.projects?.length || 0);
        
        if (projectsData.data?.projects?.length > 0) {
          console.log('üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
          projectsData.data.projects.forEach((project, index) => {
            console.log(`  ${index + 1}. ${project.name} (ID: ${project.id})`);
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
          const foundProject = projectsData.data.projects.find(p => p.id === newProject.data?.id);
          if (foundProject) {
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
          } else {
            console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
          }
        } else {
          console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } else {
        const error = await projectsResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      }
      
      // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ cookies (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
      console.log('\n4. üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ cookies (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã)...');
      const noCookiesResponse = await fetch('http://localhost:3000/api/projects', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –±–µ–∑ cookies:', noCookiesResponse.status);
      
      if (noCookiesResponse.status === 401) {
        console.log('‚ùå –ë–µ–∑ cookies –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - —ç—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤!');
      } else if (noCookiesResponse.ok) {
        const noCookiesData = await noCookiesResponse.json();
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –±–µ–∑ cookies');
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ cookies:', noCookiesData.data?.projects?.length || 0);
      }
      
    } else {
      const createError = await createResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createError);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  }
}

testFrontendAuth();