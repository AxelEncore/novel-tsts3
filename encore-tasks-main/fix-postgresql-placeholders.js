require('dotenv').config();
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .git
      if (!['node_modules', '.git', '.next'].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã SQLite –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ PostgreSQL
function convertSQLitePlaceholdersToPostgreSQL(content) {
  let modified = false;
  let newContent = content;
  
  // –ò—â–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ ?
  const sqlPatterns = [
    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
    /(`[^`]*\?[^`]*`)/g,
    /("[^"]*\?[^"]*")/g,
    /('[^']*\?[^']*')/g
  ];
  
  sqlPatterns.forEach(pattern => {
    const matches = newContent.match(pattern);
    if (matches) {
      matches.forEach(match => {
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ? –≤ —Å—Ç—Ä–æ–∫–µ
        const questionMarks = (match.match(/\?/g) || []).length;
        if (questionMarks > 0) {
          let convertedMatch = match;
          
          // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π ? –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π $n
          let paramIndex = 1;
          convertedMatch = convertedMatch.replace(/\?/g, () => `$${paramIndex++}`);
          
          if (convertedMatch !== match) {
            newContent = newContent.replace(match, convertedMatch);
            modified = true;
            console.log(`  –ó–∞–º–µ–Ω–µ–Ω–æ: ${match} -> ${convertedMatch}`);
          }
        }
      });
    }
  });
  
  return { content: newContent, modified };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fixPostgreSQLPlaceholders() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SQLite –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å...');
  
  // –ò—â–µ–º –≤—Å–µ TypeScript –∏ JavaScript —Ñ–∞–π–ª—ã
  const files = findFiles('./src', ['.ts', '.tsx', '.js', '.jsx']);
  
  let totalFilesModified = 0;
  let totalReplacements = 0;
  
  for (const filePath of files) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const result = convertSQLitePlaceholdersToPostgreSQL(content);
      
      if (result.modified) {
        fs.writeFileSync(filePath, result.content, 'utf8');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
        totalFilesModified++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
  }
  
  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFilesModified}`);
  
  if (totalFilesModified === 0) {
    console.log('\n‚ú® –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!');
  } else {
    console.log('\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixPostgreSQLPlaceholders().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});