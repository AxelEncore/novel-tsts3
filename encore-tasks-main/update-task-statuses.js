require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD,
  ssl: process.env.POSTGRES_SSL === 'true' || process.env.POSTGRES_SSL === 'require' 
    ? { rejectUnauthorized: false } 
    : false,
});

async function updateTaskStatuses() {
  let client;
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    client = await pool.connect();
    
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'backlog' –Ω–∞ 'todo'
    const updateBacklogTasks = `
      UPDATE tasks 
      SET status = 'todo' 
      WHERE status = 'backlog'
    `;
    
    const backlogResult = await client.query(updateBacklogTasks);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${backlogResult.rowCount} –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–∞ 'backlog' –Ω–∞ 'todo'`);
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'blocked' –Ω–∞ 'deferred' 
    const updateBlockedTasks = `
      UPDATE tasks 
      SET status = 'deferred' 
      WHERE status = 'blocked'
    `;
    
    const blockedResult = await client.query(updateBlockedTasks);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${blockedResult.rowCount} –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–∞ 'blocked' –Ω–∞ 'deferred'`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const updateBacklogColumns = `
      UPDATE columns 
      SET status = 'todo',
          name = REPLACE(REPLACE(name, '–ë–µ–∫–ª–æ–≥', '–ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'), 'Backlog', 'Todo')
      WHERE status = 'backlog' OR name ILIKE '%–±–µ–∫–ª–æ–≥%' OR name ILIKE '%backlog%'
    `;
    
    const columnsBacklogResult = await client.query(updateBacklogColumns);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${columnsBacklogResult.rowCount} –∫–æ–ª–æ–Ω–æ–∫ —Å 'backlog' —Å—Ç–∞—Ç—É—Å–æ–º`);
    
    const updateBlockedColumns = `
      UPDATE columns 
      SET status = 'deferred',
          name = REPLACE(name, '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '–û—Ç–ª–æ–∂–µ–Ω–æ')
      WHERE status = 'blocked' OR name ILIKE '%–∑–∞–±–ª–æ–∫–∏—Ä%' OR name ILIKE '%blocked%'
    `;
    
    const columnsBlockedResult = await client.query(updateBlockedColumns);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${columnsBlockedResult.rowCount} –∫–æ–ª–æ–Ω–æ–∫ —Å 'blocked' —Å—Ç–∞—Ç—É—Å–æ–º`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    const checkTasks = `
      SELECT status, COUNT(*) as count 
      FROM tasks 
      GROUP BY status 
      ORDER BY status
    `;
    
    const statusResult = await client.query(checkTasks);
    console.log('\nüìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:');
    statusResult.rows.forEach(row => {
      console.log(`   ${row.status}: ${row.count} –∑–∞–¥–∞—á`);
    });
    
    const checkColumns = `
      SELECT status, COUNT(*) as count 
      FROM columns 
      WHERE status IS NOT NULL
      GROUP BY status 
      ORDER BY status
    `;
    
    const columnStatusResult = await client.query(checkColumns);
    console.log('\nüìã –°—Ç–∞—Ç—É—Å—ã –∫–æ–ª–æ–Ω–æ–∫:');
    columnStatusResult.rows.forEach(row => {
      console.log(`   ${row.status}: ${row.count} –∫–æ–ª–æ–Ω–æ–∫`);
    });
    
    console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
  } finally {
    if (client) {
      client.release();
    }
    await pool.end();
  }
}

updateTaskStatuses();