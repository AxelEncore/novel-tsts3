const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

async function checkBoardsTable() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã boards...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const structureResult = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'boards' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `);
    
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã boards:');
    structureResult.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ color
    const hasColor = structureResult.rows.some(row => row.column_name === 'color');
    console.log(`\nüé® –ü–æ–ª–µ color ${hasColor ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} –≤ —Ç–∞–±–ª–∏—Ü–µ boards`);
    
    if (!hasColor) {
      console.log('\n‚ö†Ô∏è  –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ color –≤ —Ç–∞–±–ª–∏—Ü—É boards');
      console.log('SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ALTER TABLE boards ADD COLUMN color VARCHAR(7) DEFAULT \'#3B82F6\';');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
  } finally {
    await pool.end();
  }
}

checkBoardsTable();