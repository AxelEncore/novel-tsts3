require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD,
  ssl: process.env.POSTGRES_SSL === 'true' || process.env.POSTGRES_SSL === 'require' 
    ? { rejectUnauthorized: false } 
    : false,
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
const DEFAULT_COLUMNS = [
  {
    name: '–ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
    status: 'todo',
    color: '#6B7280',  // —Å–µ—Ä—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
    position: 0
  },
  {
    name: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    status: 'in_progress', 
    color: '#3B82F6',  // —Å–∏–Ω–∏–π
    position: 1
  },
  {
    name: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    status: 'review',
    color: '#8B5CF6',  // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    position: 2
  },
  {
    name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    status: 'done',
    color: '#10B981',  // –∑–µ–ª–µ–Ω—ã–π
    position: 3
  },
  {
    name: '–û—Ç–ª–æ–∂–µ–Ω–æ',
    status: 'deferred',
    color: '#F59E0B',  // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    position: 4
  }
];

async function createDefaultColumns() {
  let client;
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å–æ–∫...');
    
    client = await pool.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∫–æ–ª–æ–Ω–æ–∫
    const boardsWithoutColumns = `
      SELECT b.id, b.name, b.project_id
      FROM boards b
      LEFT JOIN columns c ON b.id = c.board_id
      WHERE c.id IS NULL
    `;
    
    const boards = await client.query(boardsWithoutColumns);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${boards.rows.length} –¥–æ—Å–æ–∫ –±–µ–∑ –∫–æ–ª–æ–Ω–æ–∫`);
    
    for (const board of boards.rows) {
      console.log(`\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å–∫–∏: ${board.name}`);
      
      for (const columnTemplate of DEFAULT_COLUMNS) {
        const insertColumn = `
          INSERT INTO columns (id, board_id, name, color, position, created_at, updated_at)
          VALUES (
            gen_random_uuid(),
            $1,
            $2,
            $3,
            $4,
            NOW(),
            NOW()
          )
          RETURNING id, name
        `;
        
        const result = await client.query(insertColumn, [
          board.id,
          columnTemplate.name,
          columnTemplate.color,
          columnTemplate.position
        ]);
        
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${columnTemplate.name} (${columnTemplate.color})`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const checkColumns = `
      SELECT 
        b.name as board_name,
        c.name as column_name,
        c.color,
        c.position
      FROM boards b
      JOIN columns c ON b.id = c.board_id
      ORDER BY b.name, c.position
    `;
    
    const columnsResult = await client.query(checkColumns);
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:');
    
    let currentBoard = '';
    columnsResult.rows.forEach(row => {
      if (row.board_name !== currentBoard) {
        currentBoard = row.board_name;
        console.log(`\nüìã –î–æ—Å–∫–∞: ${currentBoard}`);
      }
      console.log(`  ${row.position + 1}. ${row.column_name} (${row.color})`);
    });
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫:', error);
  } finally {
    if (client) {
      client.release();
    }
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
async function createColumnsForBoard(boardId) {
  let client;
  try {
    client = await pool.connect();
    
    for (const columnTemplate of DEFAULT_COLUMNS) {
      const insertColumn = `
        INSERT INTO columns (id, board_id, name, color, position, created_at, updated_at)
        VALUES (
          gen_random_uuid(),
          $1,
          $2,
          $3,
          $4,
          NOW(),
          NOW()
        )
      `;
      
      await client.query(insertColumn, [
        boardId,
        columnTemplate.name,
        columnTemplate.color,
        columnTemplate.position
      ]);
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–æ—Å–∫–∏ ${boardId}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å–∫–∏:', error);
    return false;
  } finally {
    if (client) {
      client.release();
    }
  }
}

// –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É—é - —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å–æ–∫
if (require.main === module) {
  createDefaultColumns();
}

module.exports = { createColumnsForBoard, DEFAULT_COLUMNS };