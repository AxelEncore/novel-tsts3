const puppeteer = require('puppeteer');

async function testProjectPersistence() {
  let browser;
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await puppeteer.launch({ 
      headless: false, 
      devtools: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await page.setRequestInterception(true);
    const networkRequests = [];
    
    page.on('request', (request) => {
      networkRequests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers(),
        postData: request.postData()
      });
      request.continue();
    });
    
    page.on('response', async (response) => {
      if (response.url().includes('/api/')) {
        const responseData = {
          url: response.url(),
          status: response.status(),
          headers: response.headers()
        };
        
        try {
          const text = await response.text();
          responseData.body = text;
        } catch (e) {
          responseData.body = 'Could not read response body';
        }
        
        console.log('üì° API Response:', responseData);
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
      await page.type('input[type="email"]', 'axelencore@mail.ru');
      await page.type('input[type="password"]', 'Ad580dc6axelencore');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await page.click('button[type="submit"]');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const existingProjects = await page.evaluate(() => {
      const projectElements = document.querySelectorAll('[data-testid="project-card"], .project-card, .project-item');
      return Array.from(projectElements).map(el => el.textContent?.trim() || el.innerText?.trim());
    });
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:', existingProjects);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const testProjectName = `–¢–µ—Å—Ç ${Date.now()}`;
    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: ${testProjectName}`);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createButton = await page.$('button:contains("–°–æ–∑–¥–∞—Ç—å"), button:contains("Create"), [data-testid="create-project"], .create-project-btn');
    if (createButton) {
      await createButton.click();
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      await page.type('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="name"]', testProjectName);
      await page.type('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="description"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await page.click('button[type="submit"], button:contains("–°–æ–∑–¥–∞—Ç—å"), button:contains("Create")');
      await new Promise(resolve => setTimeout(resolve, 2000));
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const projectsAfterCreate = await page.evaluate(() => {
      const projectElements = document.querySelectorAll('[data-testid="project-card"], .project-card, .project-item');
      return Array.from(projectElements).map(el => el.textContent?.trim() || el.innerText?.trim());
    });
    
    console.log('üìä –ü—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:', projectsAfterCreate);
    const projectCreated = projectsAfterCreate.some(p => p.includes(testProjectName));
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${projectCreated}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.reload({ waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const projectsAfterRefresh = await page.evaluate(() => {
      const projectElements = document.querySelectorAll('[data-testid="project-card"], .project-card, .project-item');
      return Array.from(projectElements).map(el => el.textContent?.trim() || el.innerText?.trim());
    });
    
    console.log('üìä –ü—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', projectsAfterRefresh);
    const projectPersisted = projectsAfterRefresh.some(p => p.includes(testProjectName));
    console.log(`üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: ${projectPersisted}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
    console.log(`- –ü—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω: ${projectCreated}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectPersisted}`);
    
    if (projectCreated && !projectPersisted) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–µ–∫—Ç –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
    } else if (projectCreated && projectPersisted) {
      console.log('‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢: –ü—Ä–æ–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
    } else {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüåê –°–ï–¢–ï–í–´–ï –ó–ê–ü–†–û–°–´:');
    networkRequests.forEach((req, index) => {
      if (req.url.includes('/api/')) {
        console.log(`${index + 1}. ${req.method} ${req.url}`);
        if (req.postData) {
          console.log(`   Data: ${req.postData}`);
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error);
  } finally {
    if (browser) {
      console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProjectPersistence().catch(console.error);