const { Pool } = require('pg');
const fetch = require('node-fetch');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

const API_BASE = 'http://localhost:3000/api';

async function getAuthToken() {
  const authResponse = await fetch(`${API_BASE}/auth/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      email: 'admin@encore-tasks.com',
      password: 'password'
    })
  });
  
  const authData = await authResponse.json();
  console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:', authData);
  
  if (!authData.token) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  }
  
  return authData.token;
}

async function testBoardsAndColumns() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const token = await getAuthToken();
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('\nüìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
    const projectResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        name: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–æ–∫',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–æ–∫ –∏ –∫–æ–ª–æ–Ω–æ–∫',
        color: '#4CAF50',
        icon: 'üìä'
      })
    });
    
    const projectData = await projectResponse.json();
    console.log('üìä –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', projectData);
    
    if (!projectData.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
    
    const projectId = projectData.data.id;
    
    // 2. –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É...');
    const boardResponse = await fetch(`${API_BASE}/projects/${projectId}/boards`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞',
        description: '–î–æ—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
        color: '#2196F3'
      })
    });
    
    const boardData = await boardResponse.json();
    console.log('üìã –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', boardResponse.status);
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', boardData);
    
    if (!boardData.success) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É');
      return;
    }
    
    const boardId = boardData.data.id;
    
    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüìù –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏...');
    const columns = [
      { name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', color: '#FF9800', position: 0 },
      { name: '–í —Ä–∞–±–æ—Ç–µ', color: '#2196F3', position: 1 },
      { name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', color: '#4CAF50', position: 2 }
    ];
    
    const createdColumns = [];
    
    for (const column of columns) {
      const columnResponse = await fetch(`${API_BASE}/boards/${boardId}/columns`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(column)
      });
      
      const columnData = await columnResponse.json();
      console.log(`üìù –ö–æ–ª–æ–Ω–∫–∞ "${column.name}" - —Å—Ç–∞—Ç—É—Å:`, columnResponse.status);
      console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:`, columnData);
      
      if (columnData.success) {
        createdColumns.push(columnData.data);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const boardsResult = await pool.query('SELECT * FROM boards WHERE project_id = $1', [projectId]);
    console.log('üìã –î–æ—Å–∫–∏ –≤ –ë–î:', boardsResult.rows);
    
    if (boardsResult.rows.length > 0) {
      const columnsResult = await pool.query('SELECT * FROM columns WHERE board_id = $1 ORDER BY position', [boardId]);
      console.log('üìù –ö–æ–ª–æ–Ω–∫–∏ –≤ –ë–î:', columnsResult.rows);
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    if (createdColumns.length > 0) {
      console.log('\nüìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...');
      const taskResponse = await fetch(`${API_BASE}/columns/${createdColumns[0].id}/tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
          priority: 'medium'
        })
      });
      
      const taskData = await taskResponse.json();
      console.log('üìã –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskResponse.status);
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskData);
      
      if (taskData.success) {
        const tasksResult = await pool.query('SELECT * FROM tasks WHERE column_id = $1', [createdColumns[0].id]);
        console.log('üìã –ó–∞–¥–∞—á–∏ –≤ –ë–î:', tasksResult.rows);
      }
    }
    
    // 6. –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
    const deleteResponse = await fetch(`${API_BASE}/projects/${projectId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (deleteResponse.ok) {
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await pool.end();
  }
}

testBoardsAndColumns();