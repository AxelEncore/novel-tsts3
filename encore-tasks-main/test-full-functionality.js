const { Client } = require('pg');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const fetch = require('node-fetch');
const { v4: uuidv4 } = require('uuid');

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const BASE_URL = 'http://localhost:3000';

const client = new Client({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/encore_tasks'
});

class FullFunctionalityTest {
  constructor() {
    this.csrfToken = null;
    this.authCookie = null;
    this.adminId = null;
    this.testResults = {
      passed: 0,
      failed: 0,
      tests: []
    };
  }

  logTest(name, success, details = '') {
    const result = success ? '‚úÖ' : '‚ùå';
    console.log(`${result} ${name}${details ? ': ' + details : ''}`);
    this.testResults.tests.push({ name, success, details });
    if (success) {
      this.testResults.passed++;
    } else {
      this.testResults.failed++;
    }
  }

  async setup() {
    try {
      await client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
      
      // –ù–∞–π–¥–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminEmail = 'axelencore@mail.ru';
      const adminPassword = 'Ad580dc6axelencore';
      
      let adminResult = await client.query('SELECT id FROM users WHERE email = $1', [adminEmail]);
      
      if (adminResult.rows.length > 0) {
        this.adminId = adminResult.rows[0].id;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', this.adminId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(adminPassword, 10);
        await client.query(`
          UPDATE users SET password_hash = $1, role = 'admin', approval_status = 'approved', updated_at = NOW()
          WHERE id = $2
        `, [hashedPassword, this.adminId]);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
      throw error;
    }
  }

  async authenticate() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
      const csrfResponse = await fetch(`${BASE_URL}/api/csrf`);
      const csrfData = await csrfResponse.json();
      this.csrfToken = csrfData.csrfToken;
      const csrfCookie = csrfResponse.headers.get('set-cookie');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
      const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': csrfCookie
        },
        body: JSON.stringify({
          email: 'axelencore@mail.ru',
          password: 'Ad580dc6axelencore'
        })
      });
      
      if (loginResponse.ok) {
        this.authCookie = loginResponse.headers.get('set-cookie');
        this.logTest('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', true, '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
        return true;
      } else {
        this.logTest('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', false, `–°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
        return false;
      }
    } catch (error) {
      this.logTest('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', false, error.message);
      return false;
    }
  }

  async testProjects() {
    try {
      console.log('\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏...');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const createResponse = await fetch(`${BASE_URL}/api/projects`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': this.authCookie
        },
        body: JSON.stringify({
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–∏',
          description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL'
        })
      });
      
      if (createResponse.ok) {
        const response = await createResponse.json();
        const projectData = response.data; // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ data
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', true, `ID: ${projectData.id}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const listResponse = await fetch(`${BASE_URL}/api/projects`, {
          headers: { 'Cookie': this.authCookie }
        });
        
        if (listResponse.ok) {
          const projectsResponse = await listResponse.json();
          const projects = projectsResponse.data.projects; // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ data.projects
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', true, `–ù–∞–π–¥–µ–Ω–æ: ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
          
          // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          const getResponse = await fetch(`${BASE_URL}/api/projects/${projectData.id}`, {
            headers: { 'Cookie': this.authCookie }
          });
          
          if (getResponse.ok) {
            this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID', true);
            return projectData.id;
          } else {
            this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID', false, `–°—Ç–∞—Ç—É—Å: ${getResponse.status}`);
          }
        } else {
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', false, `–°—Ç–∞—Ç—É—Å: ${listResponse.status}`);
        }
      } else {
        const errorText = await createResponse.text();
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', false, `–°—Ç–∞—Ç—É—Å: ${createResponse.status}, ${errorText}`);
      }
    } catch (error) {
      this.logTest('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', false, error.message);
    }
    return null;
  }

  async testBoards(projectId) {
    if (!projectId) {
      this.logTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–æ–∫', false, '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return null;
    }
    
    try {
      console.log('\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏...');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
      const createResponse = await fetch(`${BASE_URL}/api/projects/${projectId}/boards`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': this.authCookie
        },
        body: JSON.stringify({
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
          description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
        })
      });
      
      if (createResponse.ok) {
        const response = await createResponse.json();
        const boardData = response.data || response; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏', true, `ID: ${boardData.id}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        const listResponse = await fetch(`${BASE_URL}/api/projects/${projectId}/boards`, {
          headers: { 'Cookie': this.authCookie }
        });
        
        if (listResponse.ok) {
          const boardsResponse = await listResponse.json();
          const boards = boardsResponse.data || boardsResponse; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          const boardsArray = Array.isArray(boards) ? boards : (boards.boards || []);
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫', true, `–ù–∞–π–¥–µ–Ω–æ: ${boardsArray.length} –¥–æ—Å–æ–∫`);
          return boardData.id;
        } else {
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫', false, `–°—Ç–∞—Ç—É—Å: ${listResponse.status}`);
        }
      } else {
        const errorText = await createResponse.text();
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏', false, `–°—Ç–∞—Ç—É—Å: ${createResponse.status}, ${errorText}`);
      }
    } catch (error) {
      this.logTest('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏', false, error.message);
    }
    return null;
  }

  async testColumns(boardId) {
    if (!boardId) {
      this.logTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫', false, '–ù–µ—Ç –¥–æ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return [];
    }
    
    try {
      console.log('\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∞–º–∏...');
      
      const columnNames = ['–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'];
      const createdColumns = [];
      
      for (let i = 0; i < columnNames.length; i++) {
        const createResponse = await fetch(`${BASE_URL}/api/boards/${boardId}/columns`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-csrf-token': this.csrfToken,
            'Cookie': this.authCookie
          },
          body: JSON.stringify({
            name: columnNames[i],
            position: i
          })
        });
        
        if (createResponse.ok) {
          const response = await createResponse.json();
          const columnData = response.data || response; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
          createdColumns.push(columnData.id);
          this.logTest(`–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ "${columnNames[i]}"`, true, `ID: ${columnData.id}`);
        } else {
          this.logTest(`–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ "${columnNames[i]}"`, false, `–°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
        }
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
      const listResponse = await fetch(`${BASE_URL}/api/boards/${boardId}/columns`, {
        headers: { 'Cookie': this.authCookie }
      });
      
      if (listResponse.ok) {
        const columnsResponse = await listResponse.json();
        const columns = columnsResponse.data || columnsResponse; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const columnsArray = Array.isArray(columns) ? columns : (columns.columns || []);
        this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫', true, `–ù–∞–π–¥–µ–Ω–æ: ${columnsArray.length} –∫–æ–ª–æ–Ω–æ–∫`);
      } else {
        this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫', false, `–°—Ç–∞—Ç—É—Å: ${listResponse.status}`);
      }
      
      return createdColumns;
    } catch (error) {
      this.logTest('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∞–º–∏', false, error.message);
      return [];
    }
  }

  async testTasks(columnIds) {
    if (columnIds.length === 0) {
      this.logTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á', false, '–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    try {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏...');
      
      const taskData = {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏',
        priority: 'medium',
        column_id: columnIds[0]
      };
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const createResponse = await fetch(`${BASE_URL}/api/tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': this.authCookie
        },
        body: JSON.stringify(taskData)
      });
      
      if (createResponse.ok) {
        const response = await createResponse.json();
        const task = response.data || response; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', true, `ID: ${task.id}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const getResponse = await fetch(`${BASE_URL}/api/tasks/${task.id}`, {
          headers: { 'Cookie': this.authCookie }
        });
        
        if (getResponse.ok) {
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID', true);
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
          const updateResponse = await fetch(`${BASE_URL}/api/tasks/${task.id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'x-csrf-token': this.csrfToken,
              'Cookie': this.authCookie
            },
            body: JSON.stringify({
              title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
              description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
              priority: 'high'
            })
          });
          
          if (updateResponse.ok) {
            this.logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', true);
          } else {
            this.logTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', false, `–°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
          }
        } else {
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID', false, `–°—Ç–∞—Ç—É—Å: ${getResponse.status}`);
        }
      } else {
        const errorText = await createResponse.text();
        this.logTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', false, `–°—Ç–∞—Ç—É—Å: ${createResponse.status}, ${errorText}`);
      }
    } catch (error) {
      this.logTest('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏', false, error.message);
    }
  }

  async testUsers() {
    try {
      console.log('\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const listResponse = await fetch(`${BASE_URL}/api/users`, {
        headers: { 'Cookie': this.authCookie }
      });
      
      if (listResponse.ok) {
        const usersResponse = await listResponse.json();
        const users = usersResponse.users || usersResponse; // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–ª–µ users
        this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', true, `–ù–∞–π–¥–µ–Ω–æ: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const meResponse = await fetch(`${BASE_URL}/api/auth/me`, {
          headers: { 'Cookie': this.authCookie }
        });
        
        if (meResponse.ok) {
          const profileResponse = await meResponse.json();
          const profile = profileResponse.user || profileResponse; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, `Email: ${profile.email}`);
        } else {
          this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, `–°—Ç–∞—Ç—É—Å: ${meResponse.status}`);
        }
      } else {
        this.logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', false, `–°—Ç–∞—Ç—É—Å: ${listResponse.status}`);
      }
    } catch (error) {
      this.logTest('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', false, error.message);
    }
  }

  async testDataIntegrity() {
    try {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
      const tables = ['users', 'projects', 'boards', 'columns', 'tasks'];
      
      for (const table of tables) {
        const result = await client.query(`SELECT COUNT(*) as count FROM ${table}`);
        const count = parseInt(result.rows[0].count);
        this.logTest(`–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã ${table}`, count >= 0, `–ó–∞–ø–∏—Å–µ–π: ${count}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
      const fkCheck = await client.query(`
        SELECT COUNT(*) as count FROM projects p 
        LEFT JOIN users u ON p.creator_id = u.id 
        WHERE u.id IS NULL
      `);
      
      const orphanedProjects = parseInt(fkCheck.rows[0].count);
      this.logTest('–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π', orphanedProjects === 0, 
        orphanedProjects > 0 ? `–ù–∞–π–¥–µ–Ω–æ ${orphanedProjects} –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ —Å–æ–∑–¥–∞—Ç–µ–ª—è` : '–í—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      
    } catch (error) {
      this.logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö', false, error.message);
    }
  }

  async runAllTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    try {
      await this.setup();
      
      if (await this.authenticate()) {
        const projectId = await this.testProjects();
        const boardId = await this.testBoards(projectId);
        const columnIds = await this.testColumns(boardId);
        await this.testTasks(columnIds);
        await this.testUsers();
        await this.testDataIntegrity();
      }
      
      // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
      console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passed}`);
      console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failed}`);
      console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((this.testResults.passed / (this.testResults.passed + this.testResults.failed)) * 100)}%`);
      
      if (this.testResults.failed > 0) {
        console.log('\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:');
        this.testResults.tests
          .filter(test => !test.success)
          .forEach(test => console.log(`  - ${test.name}: ${test.details}`));
      }
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    } finally {
      await client.end();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const test = new FullFunctionalityTest();
test.runAllTests();