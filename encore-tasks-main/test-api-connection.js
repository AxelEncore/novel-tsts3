const fetch = require('node-fetch');

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
async function testAPIConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    const healthResponse = await fetch('http://localhost:3000', {
      method: 'GET'
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', healthResponse.status);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(healthResponse.headers.entries()));
    
    if (healthResponse.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API auth/me –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API /auth/me –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
    const meResponse = await fetch('http://localhost:3000/api/auth/me', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–°—Ç–∞—Ç—É—Å /auth/me:', meResponse.status);
    const meText = await meResponse.text();
    console.log('–û—Ç–≤–µ—Ç /auth/me:', meText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API login —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API /auth/login —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const badLoginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'nonexistent@test.com',
        password: 'wrongpassword'
      })
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', badLoginResponse.status);
    const badLoginText = await badLoginResponse.text();
    console.log('–û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', badLoginText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API login —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API /auth/login —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@encore-tasks.com',
        password: 'admin123'
      })
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', loginResponse.status);
    const loginText = await loginResponse.text();
    console.log('–û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', loginText.substring(0, 500) + (loginText.length > 500 ? '...' : ''));
    
    if (loginResponse.ok) {
      try {
        const loginData = JSON.parse(loginText);
        if (loginData.token) {
          console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', loginData.token.substring(0, 20) + '...');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å —Ç–æ–∫–µ–Ω–æ–º
          console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API /auth/me —Å —Ç–æ–∫–µ–Ω–æ–º...');
          const authMeResponse = await fetch('http://localhost:3000/api/auth/me', {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${loginData.token}`,
              'Content-Type': 'application/json'
            }
          });
          
          console.log('–°—Ç–∞—Ç—É—Å /auth/me —Å —Ç–æ–∫–µ–Ω–æ–º:', authMeResponse.status);
          const authMeText = await authMeResponse.text();
          console.log('–û—Ç–≤–µ—Ç /auth/me —Å —Ç–æ–∫–µ–Ω–æ–º:', authMeText);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–æ–µ–∫—Ç–æ–≤
          console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API /projects...');
          const projectsResponse = await fetch('http://localhost:3000/api/projects', {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${loginData.token}`,
              'Content-Type': 'application/json'
            }
          });
          
          console.log('–°—Ç–∞—Ç—É—Å /projects:', projectsResponse.status);
          const projectsText = await projectsResponse.text();
          console.log('–û—Ç–≤–µ—Ç /projects:', projectsText.substring(0, 500) + (projectsText.length > 500 ? '...' : ''));
        }
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ª–æ–≥–∏–Ω–∞:', parseError.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testAPIConnection();
}

module.exports = { testAPIConnection };