const { Pool } = require('pg');

async function fixUsersTable() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...');
  
  const config = {
    connectionString: 'postgresql://neondb_owner:npg_xcT4uktYV6OK@ep-odd-glade-aemzigu2.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require',
    ssl: { rejectUnauthorized: false }
  };
  
  const pool = new Pool(config);
  
  try {
    const client = await pool.connect();
    
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...');
    const columnsResult = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `);
    
    console.log('üèóÔ∏è –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
    columnsResult.rows.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ is_approved
    const hasIsApproved = columnsResult.rows.some(col => col.column_name === 'is_approved');
    const hasApprovalStatus = columnsResult.rows.some(col => col.column_name === 'approval_status');
    
    console.log('\\nüîç –°—Ç–∞—Ç—É—Å –ø–æ–ª–µ–π:');
    console.log(`  - is_approved: ${hasIsApproved ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    console.log(`  - approval_status: ${hasApprovalStatus ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è is_approved, –Ω–æ –µ—Å—Ç—å approval_status - –¥–æ–±–∞–≤–∏–º –∞–ª–∏–∞—Å
    if (!hasIsApproved && hasApprovalStatus) {
      console.log('\\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_approved –∫–∞–∫ computed column...');
      await client.query(`
        ALTER TABLE users 
        ADD COLUMN IF NOT EXISTS is_approved BOOLEAN 
        GENERATED ALWAYS AS (approval_status = 'approved') STORED
      `);
      console.log('‚úÖ –ü–æ–ª–µ is_approved –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } else if (!hasIsApproved && !hasApprovalStatus) {
      console.log('\\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è is_approved –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞...');
      await client.query(`
        ALTER TABLE users 
        ADD COLUMN IF NOT EXISTS is_approved BOOLEAN DEFAULT TRUE
      `);
      console.log('‚úÖ –ü–æ–ª–µ is_approved –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      
      // –£—Å—Ç–∞–Ω–æ–≤–∏–º is_approved = true –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await client.query('UPDATE users SET is_approved = true WHERE is_approved IS NULL');
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    } else {
      console.log('\\n‚úÖ –ü–æ–ª–µ is_approved —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResult = await client.query('SELECT id, email, name, role, is_approved FROM users');
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
    usersResult.rows.forEach(user => {
      console.log(`  - ${user.email} (${user.role}) - is_approved: ${user.is_approved}`);
    });
    
    client.release();
    console.log('\\nüéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
    return false;
  } finally {
    await pool.end();
  }
}

fixUsersTable().then(success => {
  console.log(`\\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
  process.exit(success ? 0 : 1);
});