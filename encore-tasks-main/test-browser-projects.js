const puppeteer = require('puppeteer');

async function testProjectPersistence() {
  let browser;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = await puppeteer.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
      defaultViewport: { width: 1280, height: 720 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await page.setRequestInterception(true);
    page.on('request', (request) => {
      if (request.url().includes('/api/')) {
        console.log(`üì§ API Request: ${request.method()} ${request.url()}`);
      }
      request.continue();
    });
    
    page.on('response', async (response) => {
      if (response.url().includes('/api/')) {
        const status = response.status();
        console.log(`üì• API Response: ${response.request().method()} ${response.url()} - ${status}`);
        
        if (response.url().includes('/api/projects')) {
          try {
            const responseText = await response.text();
            console.log(`üìã Projects API Response Body:`, responseText);
          } catch (e) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞');
          }
        }
      }
    });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        console.log(`üî¥ Browser Console Error: ${msg.text()}`);
      } else if (msg.type() === 'warn') {
        console.log(`üü° Browser Console Warning: ${msg.text()}`);
      }
    });
    
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3000...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
      await page.type('input[type="email"]', 'admin@example.com');
      await page.type('input[type="password"]', 'Ad580dc6axelencore');
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
      await page.click('button[type="submit"]');
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await page.waitForNavigation({ waitUntil: 'networkidle2' });
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsBefore = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', 
      elements => elements.length
    ).catch(() => 0);
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsBefore}`);
    
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createButton = await page.$('button:has-text("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"), button:has-text("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"), button[data-testid="create-project"]');
    
    if (!createButton) {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å –ø–ª—é—Å–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      const buttons = await page.$$('button');
      let foundCreateButton = false;
      
      for (const button of buttons) {
        const text = await button.evaluate(el => el.textContent?.toLowerCase() || '');
        if (text.includes('—Å–æ–∑–¥–∞—Ç—å') || text.includes('–Ω–æ–≤—ã–π') || text.includes('+')) {
          await button.click();
          foundCreateButton = true;
          console.log(`üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: "${text}"`);
          break;
        }
      }
      
      if (!foundCreateButton) {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
    } else {
      await createButton.click();
      console.log('üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
    }
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const projectName = `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ${Date.now()}`;
    
    try {
      await page.type('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–∏–º—è"]', projectName);
      await page.type('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]', '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await page.click('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")');
      
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', error.message);
      return;
    }
    
    // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsAfter = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', 
      elements => elements.length
    ).catch(() => 0);
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsAfter}`);
    
    if (projectsAfter > projectsBefore) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫');
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ');
    }
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.reload({ waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const projectsAfterReload = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', 
      elements => elements.length
    ).catch(() => 0);
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsAfterReload}`);
    
    if (projectsAfterReload === projectsAfter) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–µ–∫—Ç—ã –∏—Å—á–µ–∑–ª–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
      console.log(`   –î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsAfter}, –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsAfterReload}`);
    }
    
    // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 5000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProjectPersistence().catch(console.error);