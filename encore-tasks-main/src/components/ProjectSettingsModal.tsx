'use client';

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Settings, 
  Users, 
  Bell, 
  Trash2, 
  Save, 
  X, 
  AlertTriangle,
  Palette,
  Calendar,
  Tag,
  Shield,
  UserPlus,
  UserMinus,
  Crown
} from 'lucide-react';
import { useApp } from '@/contexts/AppContext';
import { toast } from 'sonner';

interface ProjectSettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  project?: any;
  onProjectUpdated?: (project: any) => void;
  onProjectDeleted?: (projectId: string) => void;
}

type SettingsTab = 'general' | 'members' | 'notifications' | 'danger';

export default function ProjectSettingsModal({
  isOpen,
  onClose,
  project,
  onProjectUpdated,
  onProjectDeleted
}: ProjectSettingsModalProps) {
  console.log('ProjectSettingsModal rendering:', { isOpen, project });
  const { state } = useApp();
  
  if (!project) {
    console.log('No project provided to ProjectSettingsModal');
    return null;
  }
  
  const projectId = project.id;
  
  const [activeTab, setActiveTab] = useState<SettingsTab>('general');
  const [loading, setLoading] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  
  // Form states
  const [formData, setFormData] = useState({
    name: project?.name || '',
    description: project?.description || '',
    color: project?.color || '#3B82F6',
    icon: project?.icon || 'üìÅ',
    status: (project as any)?.status || 'active',
    visibility: (project as any)?.visibility || 'private',
    priority: (project as any)?.priority || 'medium',
    deadline: (project as any)?.deadline || '',
    telegram_chat_id: (project as any)?.telegram_chat_id || '',
    telegram_topic_id: (project as any)?.telegram_topic_id || '',
    notification_settings: {
      enabled: true,
      types: ['task_created', 'task_completed', 'member_added'],
      channels: ['in-app', 'email'] as ('email' | 'telegram' | 'in-app')[]
    },
    tags: (project as any)?.tags || []
  });

  const [newTag, setNewTag] = useState('');
  const [newMemberEmail, setNewMemberEmail] = useState('');
  const [members, setMembers] = useState<any[]>([]);

  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        description: project.description || '',
        color: project.color || '#3B82F6',
        icon: project.icon || 'üìÅ',
        status: (project as any).status || 'active',
        visibility: (project as any).visibility || 'private',
        priority: (project as any).priority || 'medium',
        deadline: (project as any).deadline || '',
        telegram_chat_id: (project as any).telegram_chat_id || '',
        telegram_topic_id: (project as any).telegram_topic_id || '',
        notification_settings: (project as any).notification_settings || {
          enabled: true,
          types: ['task_created', 'task_completed', 'member_added'],
          channels: ['in-app', 'email']
        },
        tags: (project as any).tags || []
      });
      // –ó–∞–≥—Ä—É–∑–∫–∞ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
      fetchProjectMembers();
    }
  }, [project]);

  const fetchProjectMembers = async () => {
    try {
      const response = await fetch(`/api/projects/${projectId}/members`);
      if (response.ok) {
        const data = await response.json();
        setMembers(data.members || []);
      }
    } catch (error) {
      console.error('Error fetching project members:', error);
    }
  };

  const handleSaveGeneral = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.name,
          description: formData.description,
          color: formData.color,
          icon: formData.icon,
          status: formData.status,
          visibility: formData.visibility,
          priority: formData.priority,
          deadline: formData.deadline || null,
          tags: formData.tags
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        if (onProjectUpdated && result.data) {
          onProjectUpdated(result.data);
        }
        toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } else {
        throw new Error('Failed to update project');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      console.error('Error updating project:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveNotifications = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          telegram_chat_id: formData.telegram_chat_id || null,
          telegram_topic_id: formData.telegram_topic_id || null,
          notification_settings: formData.notification_settings
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        if (onProjectUpdated && result.data) {
          onProjectUpdated(result.data);
        }
        toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } else {
        throw new Error('Failed to update notifications');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      console.error('Error updating notifications:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddTag = () => {
    if (newTag && !formData.tags.includes(newTag)) {
      setFormData({
        ...formData,
        tags: [...formData.tags, newTag]
      });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(t => t !== tag)
    });
  };

  const handleAddMember = async () => {
    if (!newMemberEmail) return;
    
    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}/members`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: newMemberEmail, role: 'member' })
      });

      if (response.ok) {
        toast.success('–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç');
        setNewMemberEmail('');
        fetchProjectMembers();
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      console.error('Error adding member:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveMember = async (userId: string) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}/members/${userId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        toast.success('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞');
        fetchProjectMembers();
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      console.error('Error removing member:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateMemberRole = async (userId: string, role: string) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}/members/${userId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ role })
      });

      if (response.ok) {
        toast.success('–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        fetchProjectMembers();
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏');
      console.error('Error updating member role:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteProject = async () => {
    if (deleteConfirmText !== project?.name) {
      toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        toast.success('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        if (onProjectDeleted) {
          onProjectDeleted(projectId);
        }
        onClose();
      } else {
        throw new Error('Failed to delete project');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
      console.error('Error deleting project:', error);
    } finally {
      setLoading(false);
      setShowDeleteConfirm(false);
    }
  };

  const iconOptions = ['üìÅ', 'üíº', 'üéØ', 'üöÄ', 'üí°', '‚ö°', 'üåü', 'üî•', 'üíé', 'üé®'];
  const colorOptions = [
    '#3B82F6', '#EF4444', '#10B981', '#F59E0B', 
    '#8B5CF6', '#EC4899', '#14B8A6', '#F97316',
    '#6366F1', '#84CC16'
  ];

  const tabs = [
    { id: 'general', label: '–û—Å–Ω–æ–≤–Ω—ã–µ', icon: Settings },
    { id: 'members', label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', icon: Users },
    { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: Bell },
    { id: 'danger', label: '–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞', icon: AlertTriangle }
  ];

  if (!project) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="text-2xl flex items-center gap-2">
            <Settings className="w-6 h-6" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
          </DialogTitle>
          <DialogDescription>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
          </DialogDescription>
        </DialogHeader>

        <div className="flex gap-4 border-b">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as SettingsTab)}
                className={`flex items-center gap-2 px-4 py-2 border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.label}
              </button>
            );
          })}
        </div>

        <div className="flex-1 overflow-y-auto px-1">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          {activeTab === 'general' && (
            <div className="space-y-6 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={e => setFormData({ ...formData, name: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="status">–°—Ç–∞—Ç—É—Å</Label>
                  <Select 
                    value={formData.status}
                    onValueChange={value => setFormData({ ...formData, status: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</SelectItem>
                      <SelectItem value="archived">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</SelectItem>
                      <SelectItem value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={e => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="icon">–ò–∫–æ–Ω–∫–∞</Label>
                  <div className="flex gap-2 flex-wrap">
                    {iconOptions.map(icon => (
                      <button
                        key={icon}
                        onClick={() => setFormData({ ...formData, icon })}
                        className={`text-2xl p-2 rounded-md border-2 transition-colors ${
                          formData.icon === icon
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        {icon}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="color">–¶–≤–µ—Ç</Label>
                  <div className="flex gap-2 flex-wrap">
                    {colorOptions.map(color => (
                      <button
                        key={color}
                        onClick={() => setFormData({ ...formData, color })}
                        className={`w-10 h-10 rounded-md border-2 transition-all ${
                          formData.color === color
                            ? 'scale-110 border-gray-600'
                            : 'border-gray-300 hover:scale-105'
                        }`}
                        style={{ backgroundColor: color }}
                      />
                    ))}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Label>
                  <Select 
                    value={formData.priority}
                    onValueChange={value => setFormData({ ...formData, priority: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                      <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                      <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                      <SelectItem value="urgent">–°—Ä–æ—á–Ω—ã–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="visibility">–í–∏–¥–∏–º–æ—Å—Ç—å</Label>
                  <Select 
                    value={formData.visibility}
                    onValueChange={value => setFormData({ ...formData, visibility: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="private">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π</SelectItem>
                      <SelectItem value="public">–ü—É–±–ª–∏—á–Ω—ã–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="deadline">–î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞</Label>
                <Input
                  id="deadline"
                  type="datetime-local"
                  value={formData.deadline}
                  onChange={e => setFormData({ ...formData, deadline: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label>–¢–µ–≥–∏</Label>
                <div className="flex gap-2 flex-wrap mb-2">
                  {formData.tags.map(tag => (
                    <span
                      key={tag}
                      className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-700"
                    >
                      <Tag className="w-3 h-3" />
                      {tag}
                      <button
                        onClick={() => handleRemoveTag(tag)}
                        className="ml-1 hover:text-red-600"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </span>
                  ))}
                </div>
                <div className="flex gap-2">
                  <Input
                    value={newTag}
                    onChange={e => setNewTag(e.target.value)}
                    placeholder="–ù–æ–≤—ã–π —Ç–µ–≥"
                    onKeyPress={e => e.key === 'Enter' && handleAddTag()}
                  />
                  <Button onClick={handleAddTag} variant="outline">
                    –î–æ–±–∞–≤–∏—Ç—å
                  </Button>
                </div>
              </div>

              <Button 
                onClick={handleSaveGeneral}
                disabled={loading}
                className="w-full"
              >
                <Save className="w-4 h-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>
          )}

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ */}
          {activeTab === 'members' && (
            <div className="space-y-6 py-4">
              <div className="space-y-4">
                <div className="flex gap-2">
                  <Input
                    value={newMemberEmail}
                    onChange={e => setNewMemberEmail(e.target.value)}
                    placeholder="Email –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                    type="email"
                  />
                  <Button onClick={handleAddMember} disabled={loading}>
                    <UserPlus className="w-4 h-4 mr-2" />
                    –î–æ–±–∞–≤–∏—Ç—å
                  </Button>
                </div>

                <div className="space-y-2">
                  {members.map(member => (
                    <div 
                      key={member.id}
                      className="flex items-center justify-between p-3 border rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                          {member.user?.name?.[0]?.toUpperCase() || '?'}
                        </div>
                        <div>
                          <div className="font-medium">{member.user?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</div>
                          <div className="text-sm text-gray-600">{member.user?.email}</div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Select
                          value={member.role}
                          onValueChange={value => handleUpdateMemberRole(member.user_id, value)}
                          disabled={member.role === 'owner'}
                        >
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="owner">
                              <span className="flex items-center gap-1">
                                <Crown className="w-3 h-3" />
                                –í–ª–∞–¥–µ–ª–µ—Ü
                              </span>
                            </SelectItem>
                            <SelectItem value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</SelectItem>
                            <SelectItem value="member">–£—á–∞—Å—Ç–Ω–∏–∫</SelectItem>
                            <SelectItem value="viewer">–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å</SelectItem>
                          </SelectContent>
                        </Select>
                        
                        {member.role !== 'owner' && (
                          <Button
                            onClick={() => handleRemoveMember(member.user_id)}
                            variant="ghost"
                            size="sm"
                            className="text-red-600 hover:text-red-700"
                          >
                            <UserMinus className="w-4 h-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          {activeTab === 'notifications' && (
            <div className="space-y-6 py-4">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</h3>
                    <p className="text-sm text-gray-600">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ</p>
                  </div>
                  <input
                    type="checkbox"
                    checked={formData.notification_settings.enabled}
                    onChange={e => setFormData({
                      ...formData,
                      notification_settings: {
                        ...formData.notification_settings,
                        enabled: e.target.checked
                      }
                    })}
                    className="w-5 h-5"
                  />
                </div>

                <div className="space-y-2">
                  <Label>–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Label>
                  <div className="space-y-2">
                    {(['email', 'telegram', 'in-app'] as const).map(channel => (
                      <label key={channel} className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={formData.notification_settings.channels.includes(channel)}
                          onChange={e => {
                            const channels = e.target.checked
                              ? [...formData.notification_settings.channels, channel]
                              : formData.notification_settings.channels.filter(c => c !== channel);
                            setFormData({
                              ...formData,
                              notification_settings: {
                                ...formData.notification_settings,
                                channels
                              }
                            });
                          }}
                        />
                        <span className="capitalize">{channel === 'in-app' ? '–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏' : channel}</span>
                      </label>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Label>
                  <div className="space-y-2">
                    {[
                      { id: 'task_created', label: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á' },
                      { id: 'task_completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á' },
                      { id: 'task_assigned', label: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á' },
                      { id: 'member_added', label: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
                      { id: 'comment_added', label: '–ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' }
                    ].map(type => (
                      <label key={type.id} className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={formData.notification_settings.types.includes(type.id)}
                          onChange={e => {
                            const types = e.target.checked
                              ? [...formData.notification_settings.types, type.id]
                              : formData.notification_settings.types.filter(t => t !== type.id);
                            setFormData({
                              ...formData,
                              notification_settings: {
                                ...formData.notification_settings,
                                types
                              }
                            });
                          }}
                        />
                        <span>{type.label}</span>
                      </label>
                    ))}
                  </div>
                </div>

                <div className="space-y-4 pt-4 border-t">
                  <h3 className="font-medium">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram</h3>
                  <div className="space-y-2">
                    <Label htmlFor="telegram_chat_id">ID —á–∞—Ç–∞ Telegram</Label>
                    <Input
                      id="telegram_chat_id"
                      value={formData.telegram_chat_id}
                      onChange={e => setFormData({ ...formData, telegram_chat_id: e.target.value })}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="telegram_topic_id">ID —Ç–æ–ø–∏–∫–∞ (–¥–ª—è –≥—Ä—É–ø–ø —Å —Ç–æ–ø–∏–∫–∞–º–∏)</Label>
                    <Input
                      id="telegram_topic_id"
                      value={formData.telegram_topic_id}
                      onChange={e => setFormData({ ...formData, telegram_topic_id: e.target.value })}
                      placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
                    />
                  </div>
                </div>

                <Button 
                  onClick={handleSaveNotifications}
                  disabled={loading}
                  className="w-full"
                >
                  <Save className="w-4 h-4 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </Button>
              </div>
            </div>
          )}

          {/* –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ */}
          {activeTab === 'danger' && (
            <div className="space-y-6 py-4">
              <div className="border-2 border-red-200 rounded-lg p-6 bg-red-50">
                <h3 className="text-lg font-semibold text-red-900 mb-2">
                  –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                </h3>
                <p className="text-red-700 mb-4">
                  –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å–∫–∏, –∫–æ–ª–æ–Ω–∫–∏, 
                  –∑–∞–¥–∞—á–∏ –∏ –≤—Å—è —Å–≤—è–∑–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
                </p>
                
                {!showDeleteConfirm ? (
                  <Button
                    onClick={() => setShowDeleteConfirm(true)}
                    variant="destructive"
                    className="w-full"
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                  </Button>
                ) : (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="deleteConfirm">
                        –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "{project.name}" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
                      </Label>
                      <Input
                        id="deleteConfirm"
                        value={deleteConfirmText}
                        onChange={e => setDeleteConfirmText(e.target.value)}
                        placeholder={project.name}
                      />
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={handleDeleteProject}
                        variant="destructive"
                        disabled={loading || deleteConfirmText !== project.name}
                        className="flex-1"
                      >
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
                      </Button>
                      <Button
                        onClick={() => {
                          setShowDeleteConfirm(false);
                          setDeleteConfirmText('');
                        }}
                        variant="outline"
                        className="flex-1"
                      >
                        –û—Ç–º–µ–Ω–∞
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              <div className="border-2 border-yellow-200 rounded-lg p-6 bg-yellow-50">
                <h3 className="text-lg font-semibold text-yellow-900 mb-2">
                  –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                </h3>
                <p className="text-yellow-700 mb-4">
                  –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ –µ–≥–æ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
                </p>
                <Button
                  onClick={() => {
                    setFormData({ ...formData, status: 'archived' });
                    handleSaveGeneral();
                  }}
                  variant="outline"
                  className="w-full border-yellow-600 text-yellow-700 hover:bg-yellow-100"
                >
                  –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                </Button>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}