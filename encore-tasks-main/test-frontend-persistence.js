const puppeteer = require('puppeteer');

async function testFrontendPersistence() {
  let browser;
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    browser = await puppeteer.launch({ 
      headless: false, 
      devtools: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
    page.on('response', async (response) => {
      const url = response.url();
      if (url.includes('/api/')) {
        console.log(`üì° API –∑–∞–ø—Ä–æ—Å: ${response.request().method()} ${url} - –°—Ç–∞—Ç—É—Å: ${response.status()}`);
        try {
          const responseText = await response.text();
          if (responseText) {
            console.log(`üìù –û—Ç–≤–µ—Ç: ${responseText.substring(0, 200)}${responseText.length > 200 ? '...' : ''}`);
          }
        } catch (e) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç');
        }
      }
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', (msg) => {
      const type = msg.type();
      if (['error', 'warn'].includes(type)) {
        console.log(`üîç –ö–æ–Ω—Å–æ–ª—å ${type.toUpperCase()}: ${msg.text()}`);
      }
    });
    
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üìù –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
      await page.type('input[type="email"], input[name="email"]', 'axelencore@mail.ru');
      await page.type('input[type="password"], input[name="password"]', 'Ad580dc6axelencore');
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
      await page.click('button[type="submit"]');
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
    
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const projectsBeforeCreate = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', elements => {
      return elements.length;
    }).catch(() => {
      console.log('üîç –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º');
      return 0;
    });
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsBeforeCreate}`);
    
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map(btn => ({
        text: btn.textContent.trim(),
        className: btn.className,
        id: btn.id,
        type: btn.type
      }));
    });
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', allButtons);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    let createButton = await page.$('[data-testid="create-project"], .create-project-btn, button[class*="create"]');
    
    if (!createButton) {
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
      createButton = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => 
          btn.textContent.includes('–°–æ–∑–¥–∞—Ç—å') || 
          btn.textContent.includes('Create') ||
          btn.textContent.includes('–ù–æ–≤—ã–π') ||
          btn.textContent.includes('+')
        );
      });
    }
    
    if (createButton && createButton.asElement) {
      const element = createButton.asElement();
      if (element) {
        await element.click();
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏');
      }
    } else if (createButton) {
      try {
        await createButton.click();
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
      } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ:', e.message);
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectName = `Frontend Test ${Date.now()}`;
    await page.type('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="name"]', projectName);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let saveButton = await page.$('button[type="submit"]');
    
    if (!saveButton) {
      saveButton = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => 
          btn.textContent.includes('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') || 
          btn.textContent.includes('Save') ||
          btn.textContent.includes('–°–æ–∑–¥–∞—Ç—å')
        );
      });
    }
    
    if (saveButton) {
      if (saveButton.click) {
        await saveButton.click();
      } else {
        await page.evaluate(btn => btn.click(), saveButton);
      }
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω`);
      
      // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsAfterCreate = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', elements => {
      return elements.length;
    }).catch(() => 0);
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsAfterCreate}`);
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.reload({ waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const projectsAfterReload = await page.$$eval('[data-testid="project-card"], .project-card, [class*="project"]', elements => {
      return elements.length;
    }).catch(() => 0);
    
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsAfterReload}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (projectsAfterCreate > projectsBeforeCreate) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
      
      if (projectsAfterReload === projectsAfterCreate) {
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
      }
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
    }
    
    // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

testFrontendPersistence();