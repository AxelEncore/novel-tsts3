const fetch = require('node-fetch');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

async function debugBoardCreation() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      })
    });
    
    const loginData = await loginResponse.json();
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', loginData.token ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    
    if (!loginData.token) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginData);
      return;
    }
    
    const authToken = loginData.token;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectsResponse = await fetch('http://localhost:3000/api/projects', {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Cookie': `auth-token=${authToken}`
      }
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResponse.status);
    const projectsText = await projectsResponse.text();
    console.log('üìÑ –û—Ç–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ (raw):', projectsText);
    
    let projectsData;
    try {
      projectsData = JSON.parse(projectsText);
      console.log('üìã –ü—Ä–æ–µ–∫—Ç—ã (JSON):', JSON.stringify(projectsData, null, 2));
    } catch (e) {
      console.error('‚ùå –û—Ç–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON:', e.message);
      return;
    }
    
    console.log('üìã –ü—Ä–æ–µ–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', projectsData.projects?.length || 0);
    
    let testProject;
    if (!projectsData.projects || projectsData.projects.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
      console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResponse.status);
      console.log('üìÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:', JSON.stringify(projectsData, null, 2));
      
      try {
        const createProjectResponse = await fetch('http://localhost:3000/api/projects', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
            'Cookie': `auth-token=${authToken}`
          },
          body: JSON.stringify({
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ—Å–æ–∫',
            description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–æ–∫'
          })
        });
        
        console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createProjectResponse.status);
        const createProjectText = await createProjectResponse.text();
        console.log('üìÑ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (raw):', createProjectText);
        
        let createProjectData;
        try {
          createProjectData = JSON.parse(createProjectText);
          console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (JSON):', createProjectData);
        } catch (e) {
          console.error('‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON:', e.message);
          return;
        }
        
        if (!createProjectData.data) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:', createProjectData);
          return;
        }
        
        testProject = createProjectData.data;
      } catch (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', createError);
        return;
      }
    } else {
       testProject = projectsData.projects[0];
     }
    
    if (!testProject) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
      return;
    }
    
    console.log('üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', testProject.name, 'ID:', testProject.id);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É
    console.log('\nüî® –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É...');
    const boardData = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏',
      color: '#3B82F6'
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(boardData, null, 2));
    console.log('üîó URL:', `http://localhost:3000/api/projects/${testProject.id}/boards`);
    console.log('üîë –¢–æ–∫–µ–Ω:', authToken.substring(0, 20) + '...');
    
    const boardResponse = await fetch(`http://localhost:3000/api/projects/${testProject.id}/boards`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`,
        'Cookie': `auth-token=${authToken}`
      },
      body: JSON.stringify(boardData)
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', boardResponse.status);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(boardResponse.headers.entries()));
    
    const boardResult = await boardResponse.text();
    console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (raw):', boardResult);
    
    try {
      const boardJson = JSON.parse(boardResult);
      console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (JSON):', JSON.stringify(boardJson, null, 2));
    } catch (e) {
      console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã boards
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã boards...');
    const tableStructure = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'boards' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã boards:');
    tableStructure.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await pool.end();
  }
}

debugBoardCreation();