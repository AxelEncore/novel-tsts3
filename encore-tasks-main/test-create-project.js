const puppeteer = require('puppeteer');

async function testCreateProject() {
  let browser;
  try {
    console.log('üöÄ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    browser = await puppeteer.launch({ 
      headless: false, 
      devtools: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
    await page.setRequestInterception(true);
    const apiCalls = [];
    
    page.on('request', (request) => {
      if (request.url().includes('/api/')) {
        apiCalls.push({
          method: request.method(),
          url: request.url(),
          data: request.postData()
        });
      }
      request.continue();
    });
    
    page.on('response', async (response) => {
      if (response.url().includes('/api/projects')) {
        try {
          const text = await response.text();
          console.log(`üì° ${response.request().method()} /api/projects [${response.status()}]:`, text.substring(0, 200) + '...');
        } catch (e) {
          console.log(`üì° ${response.request().method()} /api/projects [${response.status()}]: Could not read response`);
        }
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
      await page.type('input[type="email"]', 'axelencore@mail.ru');
      await page.type('input[type="password"]', 'Ad580dc6axelencore');
      await page.click('button[type="submit"]');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsCountBefore = await page.evaluate(() => {
      const elements = document.querySelectorAll('*');
      let count = 0;
      for (let el of elements) {
        const text = el.textContent || '';
        if (text.includes('–¢–µ—Å—Ç') && text.includes('–ø—Ä–æ–µ–∫—Ç')) {
          count++;
        }
      }
      return count;
    });
    
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsCountBefore}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
    const testProjectName = `–¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç ${Date.now()}`;
    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${testProjectName}`);
    
    const createResult = await page.evaluate(async (projectName) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        const csrfResponse = await fetch('/api/csrf');
        const csrfData = await csrfResponse.json();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        const response = await fetch('/api/projects', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfData.csrfToken
          },
          body: JSON.stringify({
            name: projectName,
            description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
            color: '#3B82F6',
            isPrivate: true
          })
        });
        
        const result = await response.json();
        return {
          success: response.ok,
          status: response.status,
          data: result
        };
      } catch (error) {
        return {
          success: false,
          error: error.message
        };
      }
    }, testProjectName);
    
    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:', createResult);
    
    // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsCountAfter = await page.evaluate(() => {
      const elements = document.querySelectorAll('*');
      let count = 0;
      for (let el of elements) {
        const text = el.textContent || '';
        if (text.includes('–¢–µ—Å—Ç') && text.includes('–ø—Ä–æ–µ–∫—Ç')) {
          count++;
        }
      }
      return count;
    });
    
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsCountAfter}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.reload({ waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const projectsCountAfterRefresh = await page.evaluate(() => {
      const elements = document.querySelectorAll('*');
      let count = 0;
      for (let el of elements) {
        const text = el.textContent || '';
        if (text.includes('–¢–µ—Å—Ç') && text.includes('–ø—Ä–æ–µ–∫—Ç')) {
          count++;
        }
      }
      return count;
    });
    
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsCountAfterRefresh}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìà –ê–ù–ê–õ–ò–ó:');
    console.log(`- –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${createResult.success}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ: ${projectsCountBefore}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsCountAfter}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsCountAfterRefresh}`);
    
    if (createResult.success && projectsCountAfterRefresh >= projectsCountAfter) {
      console.log('‚úÖ –£–°–ü–ï–•: –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (createResult.success && projectsCountAfterRefresh < projectsCountAfter) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è, –Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
    
    console.log('\nüåê API –í–´–ó–û–í–´:');
    apiCalls.forEach((call, i) => {
      console.log(`${i + 1}. ${call.method} ${call.url}`);
      if (call.data) {
        console.log(`   Data: ${call.data}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (browser) {
      console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
      await new Promise(resolve => setTimeout(resolve, 5000));
      await browser.close();
    }
  }
}

testCreateProject().catch(console.error);