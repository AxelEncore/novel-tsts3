const axios = require('axios');

async function testProjectPersistence() {
  try {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'axelencore@mail.ru',
      password: 'Ad580dc6axelencore'
    });
    
    if (!loginResponse.data.token) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    const token = loginResponse.data.token;
    const headers = { Authorization: `Bearer ${token}` };
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsBeforeResponse = await axios.get('http://localhost:3000/api/projects', { headers });
    const projectsBefore = projectsBeforeResponse.data.data.projects;
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsBefore.length}`);
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectName = `Persistence Test ${Date.now()}`;
    const createResponse = await axios.post('http://localhost:3000/api/projects', {
      name: projectName,
      description: '–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
      color: '#3B82F6',
      icon: 'üìã'
    }, { headers });
    
    if (createResponse.status !== 201) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${createResponse.status}`);
    }
    
    const createdProject = createResponse.data.data;
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω —Å ID: ${createdProject.id}`);
    
    // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsAfterResponse = await axios.get('http://localhost:3000/api/projects', { headers });
    const projectsAfter = projectsAfterResponse.data.data.projects;
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsAfter.length}`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    const foundProject = projectsAfter.find(p => p.id === createdProject.id);
    if (foundProject) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
      return;
    }
    
    // 6. –ò–º–∏—Ç–∏—Ä—É–µ–º "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã" - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üîÑ –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    const projectsAfterReloadResponse = await axios.get('http://localhost:3000/api/projects', { headers });
    const projectsAfterReload = projectsAfterReloadResponse.data.data.projects;
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": ${projectsAfterReload.length}`);
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ –µ—Å—Ç—å
    const foundProjectAfterReload = projectsAfterReload.find(p => p.id === createdProject.id);
    if (foundProjectAfterReload) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"');
      console.log('üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è!');
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"!');
      console.log('üí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–æ–≤!');
    }
    
    // 8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('üîÑ –¢–µ—Å—Ç —Å –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
    const newLoginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'axelencore@mail.ru',
      password: 'Ad580dc6axelencore'
    });
    
    const newToken = newLoginResponse.data.token;
    const newHeaders = { Authorization: `Bearer ${newToken}` };
    
    const projectsWithNewTokenResponse = await axios.get('http://localhost:3000/api/projects', { headers: newHeaders });
    const projectsWithNewToken = projectsWithNewTokenResponse.data.data.projects;
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º: ${projectsWithNewToken.length}`);
    
    const foundProjectWithNewToken = projectsWithNewToken.find(p => p.id === createdProject.id);
    if (foundProjectWithNewToken) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

testProjectPersistence();