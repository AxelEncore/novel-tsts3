const fetch = require('node-fetch');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
const authToken = fs.readFileSync('auth_token.txt', 'utf8').trim();

async function testAuthenticatedAPI() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
  console.log('üìã –¢–æ–∫–µ–Ω:', authToken.substring(0, 50) + '...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/projects —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    console.log('\nüì° –ó–∞–ø—Ä–æ—Å GET /api/projects —Å —Ç–æ–∫–µ–Ω–æ–º...');
    const response = await fetch('http://localhost:3000/api/projects', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìã Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!');
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', data.length || 'N/A');
      
      if (Array.isArray(data) && data.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–µ–∫—Ç–∞:');
        data.slice(0, 3).forEach((project, index) => {
          console.log(`  ${index + 1}. ${project.name} (ID: ${project.id})`);
        });
      } else {
        console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüÜï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    const createResponse = await fetch('http://localhost:3000/api/projects', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: 'Test Auth Project ' + Date.now(),
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        icon: 'üîê'
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è:', createResponse.status);
    
    if (createResponse.ok) {
      const newProject = await createResponse.json();
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', newProject.data?.name);
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
      console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
      const secondResponse = await fetch('http://localhost:3000/api/projects', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (secondResponse.ok) {
        const updatedData = await secondResponse.json();
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', updatedData.length || 'N/A');
        
        // –ò—â–µ–º –Ω–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const foundProject = updatedData.find(p => p.id === newProject.data?.id);
        if (foundProject) {
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
        } else {
          console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
        }
      }
    } else {
      const createError = await createResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', createError);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
  }
}

testAuthenticatedAPI();