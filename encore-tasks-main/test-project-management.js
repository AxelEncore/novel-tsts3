const { Pool } = require('pg');
const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

const API_BASE = 'http://localhost:3000/api';

async function testProjectManagement() {
  try {
    console.log('=== –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ ===');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    const sessionResult = await pool.query(
      `SELECT s.token, s.user_id, u.email, u.role 
       FROM sessions s 
       JOIN users u ON s.user_id = u.id 
       WHERE s.expires_at > NOW() 
       ORDER BY s.created_at DESC 
       LIMIT 1`
    );
    
    if (sessionResult.rows.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π');
      return;
    }
    
    const session = sessionResult.rows[0];
    const authToken = session.token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.email);
    
    // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
    const newProjectData = {
      name: 'Test Project Management',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
      status: 'active'
    };
    
    const createResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify(newProjectData)
    });
    
    const createResult = await createResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è:', createResponse.status);
    
    if (createResponse.status === 200 || createResponse.status === 201) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
        id: createResult.data.id,
        name: createResult.data.name,
        status: createResult.data.status
      });
      var createdProjectId = createResult.data.id;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createResult);
      return;
    }
    
    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    const listResponse = await fetch(`${API_BASE}/projects`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    const listResult = await listResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:', listResponse.status);
    
    if (listResponse.status === 200) {
      const projects = listResult.data.projects || [];
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω:', {
        count: projects.length,
        projects: projects.map(p => ({ id: p.id, name: p.name, status: p.status }))
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
      const foundProject = projects.find(p => p.id === createdProjectId);
      if (foundProject) {
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
      } else {
        console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', listResult);
    }
    
    // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:');
    const getResponse = await fetch(`${API_BASE}/projects/${createdProjectId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    const getResult = await getResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', getResponse.status);
    
    if (getResponse.status === 200) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω:', {
        id: getResult.data.id,
        name: getResult.data.name,
        description: getResult.data.description,
        status: getResult.data.status,
        created_at: getResult.data.created_at
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', getResult);
    }
    
    // 5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
    const updateData = {
      name: 'Updated Test Project',
      description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
      status: 'completed'
    };
    
    const updateResponse = await fetch(`${API_BASE}/projects/${createdProjectId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify(updateData)
    });
    
    const updateResult = await updateResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResponse.status);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        id: updateResult.data.id,
        name: updateResult.data.name,
        description: updateResult.data.description,
        status: updateResult.data.status
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', updateResult);
    }
    
    // 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞:');
    const boardsResponse = await fetch(`${API_BASE}/projects/${createdProjectId}/boards`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    const boardsResult = await boardsResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫:', boardsResponse.status);
    
    if (boardsResponse.status === 200) {
      console.log('‚úÖ –î–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã:', {
        count: boardsResult.data.length,
        boards: boardsResult.data.map(b => ({ id: b.id, name: b.name }))
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', boardsResult);
    }
    
    // 7. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n7. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
    const deleteResponse = await fetch(`${API_BASE}/projects/${createdProjectId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    const deleteResult = await deleteResponse.json();
    console.log('–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è:', deleteResponse.status);
    
    if (deleteResponse.status === 200) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
      const verifyResponse = await fetch(`${API_BASE}/projects/${createdProjectId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });
      
      if (verifyResponse.status === 404) {
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', deleteResult);
    }
    
    // 8. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n8. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    const results = [
      { operation: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: createResponse.status, success: createResponse.status === 200 || createResponse.status === 201 },
      { operation: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞', status: listResponse.status, success: listResponse.status === 200 },
      { operation: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: getResponse.status, success: getResponse.status === 200 },
      { operation: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: updateResponse.status, success: updateResponse.status === 200 },
      { operation: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫', status: boardsResponse.status, success: boardsResponse.status === 200 },
      { operation: '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: deleteResponse.status, success: deleteResponse.status === 200 }
    ];
    
    console.table(results);
    
    const successfulOperations = results.filter(r => r.success);
    const failedOperations = results.filter(r => !r.success);
    
    if (failedOperations.length === 0) {
      console.log('üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${failedOperations.length}`);
      console.log('–ù–µ—É–¥–∞—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', failedOperations.map(op => op.operation));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏:', error);
  } finally {
    await pool.end();
  }
}

testProjectManagement();