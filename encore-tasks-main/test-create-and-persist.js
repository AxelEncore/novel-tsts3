const puppeteer = require('puppeteer');

(async () => {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∑–∞–ø—Ä–æ—Å–æ–≤
  const apiRequests = [];
  page.on('response', response => {
    if (response.url().includes('/api/')) {
      apiRequests.push({
        url: response.url(),
        status: response.status(),
        method: response.request().method()
      });
      console.log(`üì° API ${response.request().method()}: ${response.status()} ${response.url()}`);
    }
  });
  
  try {
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ http://localhost:3000...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const pageInfo = await page.evaluate(() => {
      const forms = Array.from(document.querySelectorAll('form'));
      const inputs = Array.from(document.querySelectorAll('input'));
      const buttons = Array.from(document.querySelectorAll('button'));
      
      return {
        forms: forms.map(f => ({
          innerHTML: f.innerHTML.substring(0, 200),
          inputs: Array.from(f.querySelectorAll('input')).map(i => ({
            type: i.type,
            name: i.name,
            placeholder: i.placeholder,
            id: i.id
          }))
        })),
        allInputs: inputs.map(i => ({
          type: i.type,
          name: i.name,
          placeholder: i.placeholder,
          id: i.id
        })),
        buttons: buttons.map(b => ({
          text: b.textContent?.trim(),
          type: b.type,
          className: b.className
        }))
      };
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', JSON.stringify(pageInfo.forms, null, 2));
    console.log('üìã –í—Å–µ –∏–Ω–ø—É—Ç—ã:', JSON.stringify(pageInfo.allInputs, null, 2));
    console.log('üìã –í—Å–µ –∫–Ω–æ–ø–∫–∏:', JSON.stringify(pageInfo.buttons, null, 2));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const emailSelectors = [
      'input[name="email"]',
      'input[type="email"]',
      'input[placeholder*="email"]',
      'input[placeholder*="–ø–æ—á—Ç–∞"]',
      'input[id*="email"]',
      'input[id*="login"]'
    ];
    
    const passwordSelectors = [
      'input[name="password"]',
      'input[type="password"]',
      'input[placeholder*="password"]',
      'input[placeholder*="–ø–∞—Ä–æ–ª—å"]',
      'input[id*="password"]'
    ];
    
    let emailInput = null;
    let passwordInput = null;
    
    for (const selector of emailSelectors) {
      try {
        emailInput = await page.$(selector);
        if (emailInput) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: ${selector}`);
          break;
        }
      } catch (e) {}
    }
    
    for (const selector of passwordSelectors) {
      try {
        passwordInput = await page.$(selector);
        if (passwordInput) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password: ${selector}`);
          break;
        }
      } catch (e) {}
    }
    
    if (emailInput && passwordInput) {
      console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      await emailInput.type('admin@example.com');
      await passwordInput.type('admin123');
      
      const submitButton = await page.$('button[type="submit"], form button');
      if (submitButton) {
        console.log('üîë –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        await submitButton.click();
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    } else {
      console.log('‚ÑπÔ∏è –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üìÇ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    await page.goto('http://localhost:3000/projects', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('üìä –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsBefore = await page.evaluate(() => {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
      const elements = Array.from(document.querySelectorAll('*'));
      const projectElements = elements.filter(el => {
        const text = el.textContent || '';
        const hasProjectKeywords = /–ø—Ä–æ–µ–∫—Ç|project|–∑–∞–¥–∞—á|task/i.test(text);
        const isNotNavigation = !text.includes('–ì–ª–∞–≤–Ω–∞—è') && !text.includes('–î–æ—Å–∫–∏') && !text.includes('–ö–∞–ª–µ–Ω–¥–∞—Ä—å');
        const hasReasonableLength = text.length > 5 && text.length < 300;
        const isVisible = el.offsetParent !== null;
        return hasProjectKeywords && isNotNavigation && hasReasonableLength && isVisible;
      });
      
      console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–ø–æ–¥–æ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
      projectElements.forEach((el, i) => {
        console.log(`  ${i + 1}. "${el.textContent?.substring(0, 100)}..."`);
      });
      
      return projectElements.length;
    });
    console.log(`üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsBefore}`);
    
    // –ê–Ω–∞–ª–∏–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüì° –ê–ù–ê–õ–ò–ó API –ó–ê–ü–†–û–°–û–í:');
    const projectRequests = apiRequests.filter(req => req.url.includes('/api/projects'));
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /api/projects: ${projectRequests.length}`);
    
    const successfulRequests = projectRequests.filter(req => req.status >= 200 && req.status < 300);
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /api/projects: ${successfulRequests.length}`);
    
    if (successfulRequests.length > 0) {
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API - –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ API
    console.log('\nüîç –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:');
    if (projectsBefore > 0) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      console.log('‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–µ–∫—Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    await browser.close();
  }
})();