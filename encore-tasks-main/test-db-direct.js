const { Pool } = require('pg');

async function testDirectDB() {
  console.log('üîó –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
  
  const config = {
    connectionString: 'postgresql://neondb_owner:npg_xcT4uktYV6OK@ep-odd-glade-aemzigu2.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require',
    ssl: { rejectUnauthorized: false }
  };
  
  const pool = new Pool(config);
  
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    const client = await pool.connect();
    
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î...');
    const projectsResult = await client.query('SELECT * FROM projects ORDER BY created_at DESC');
    
    console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î:', projectsResult.rows.length);
    
    if (projectsResult.rows.length > 0) {
      console.log('üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:');
      projectsResult.rows.slice(0, 3).forEach(project => {
        console.log(`  - ${project.name} (ID: ${project.id.substring(0, 8)}...)`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã projects:');
    const columnsResult = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'projects' 
      ORDER BY ordinal_position
    `);
    
    columnsResult.rows.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
    });
    
    // –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
    console.log('\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ë–î...');
    const { v4: uuidv4 } = require('uuid');
    const testProjectId = uuidv4();
    
    const insertResult = await client.query(`
      INSERT INTO projects (id, name, description, creator_id, color, created_at, updated_at)
      VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
      RETURNING *
    `, [
      testProjectId,
      '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ë–î',
      '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î',
      '95592c8d-91f7-4c12-a39e-f872df6ef848', // ID –∞–¥–º–∏–Ω–∞
      '#FF5733'
    ]);
    
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', insertResult.rows[0].name);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    const checkResult = await client.query('SELECT * FROM projects WHERE id = $1', [testProjectId]);
    
    if (checkResult.rows.length > 0) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
      console.log('üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', {
        id: checkResult.rows[0].id.substring(0, 8) + '...',
        name: checkResult.rows[0].name,
        description: checkResult.rows[0].description
      });
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
    }
    
    client.release();
    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î:', error.message);
    return false;
  } finally {
    await pool.end();
  }
}

testDirectDB().then(success => {
  console.log(`\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ë–î: ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
  process.exit(success ? 0 : 1);
});