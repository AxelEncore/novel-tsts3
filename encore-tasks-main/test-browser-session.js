const puppeteer = require('puppeteer');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏
async function testBrowserSession() {
  let browser;
  let client;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    await page.setRequestInterception(true);
    
    const apiRequests = [];
    const apiResponses = [];
    
    page.on('request', request => {
      if (request.url().includes('/api/')) {
        apiRequests.push({
          url: request.url(),
          method: request.method(),
          headers: request.headers(),
          postData: request.postData()
        });
        console.log(`üì§ API Request: ${request.method()} ${request.url()}`);
      }
      request.continue();
    });
    
    page.on('response', response => {
      if (response.url().includes('/api/')) {
        apiResponses.push({
          url: response.url(),
          status: response.status(),
          headers: response.headers()
        });
        console.log(`üì• API Response: ${response.status()} ${response.url()}`);
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üîê –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
      await page.type('input[type="email"], input[name="email"]', 'axelencore@mail.ru');
      await page.type('input[type="password"], input[name="password"]', 'password123');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await page.click('button[type="submit"]');
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 3000));
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } else {
      console.log('‚ÑπÔ∏è –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º cookies –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    const cookies = await page.cookies();
    console.log('\nüç™ Cookies –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:');
    cookies.forEach(cookie => {
      if (cookie.name.includes('auth') || cookie.name.includes('token')) {
        console.log(`   ${cookie.name}: ${cookie.value.substring(0, 50)}...`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
    const currentUrl = page.url();
    console.log(`\nüìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsBefore = await page.evaluate(() => {
      const projectCards = document.querySelectorAll('[data-testid="project-card"], .project-card, [class*="project"][class*="card"]');
      return projectCards.length;
    });
    
    console.log(`\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –î–û —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsBefore}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –î–û —Å–æ–∑–¥–∞–Ω–∏—è
    const dbProjectsBefore = await client.query(
      'SELECT COUNT(*) as count FROM projects WHERE creator_id = (SELECT id FROM users WHERE email = $1)',
      ['axelencore@mail.ru']
    );
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î –î–û —Å–æ–∑–¥–∞–Ω–∏—è: ${dbProjectsBefore.rows[0].count}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('\nüÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createButton = await page.$('button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("Create"), button[data-testid="create-project"], .create-project-button');
    
    if (createButton) {
      await createButton.click();
      console.log('‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      const projectName = `Browser Test ${new Date().toLocaleTimeString()}`;
      
      await page.type('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="name"]', projectName);
      await page.type('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="description"]', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      const submitButton = await page.$('button[type="submit"], button:has-text("–°–æ–∑–¥–∞—Ç—å"), button:has-text("Create")');
      if (submitButton) {
        await submitButton.click();
        console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        
        // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const allButtons = await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.map(btn => btn.textContent?.trim()).filter(text => text);
      });
      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allButtons);
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
    const projectsAfter = await page.evaluate(() => {
      const projectCards = document.querySelectorAll('[data-testid="project-card"], .project-card, [class*="project"][class*="card"]');
      return projectCards.length;
    });
    
    console.log(`\nüìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsAfter}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
    const dbProjectsAfter = await client.query(
      'SELECT COUNT(*) as count FROM projects WHERE creator_id = (SELECT id FROM users WHERE email = $1)',
      ['axelencore@mail.ru']
    );
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: ${dbProjectsAfter.rows[0].count}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await page.reload({ waitUntil: 'networkidle0' });
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const projectsAfterRefresh = await page.evaluate(() => {
      const projectCards = document.querySelectorAll('[data-testid="project-card"], .project-card, [class*="project"][class*="card"]');
      return projectCards.length;
    });
    
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectsAfterRefresh}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log(`   –ë–î: ${dbProjectsBefore.rows[0].count} ‚Üí ${dbProjectsAfter.rows[0].count}`);
    console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${projectsBefore} ‚Üí ${projectsAfter} ‚Üí ${projectsAfterRefresh}`);
    
    if (parseInt(dbProjectsAfter.rows[0].count) > parseInt(dbProjectsBefore.rows[0].count)) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (projectsAfterRefresh >= projectsAfter && projectsAfter > projectsBefore) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    } else if (projectsAfterRefresh < projectsAfter) {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –∏—Å—á–µ–∑–∞—é—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API –∑–∞–ø—Ä–æ—Å–∞—Ö
    console.log('\nüåê API –∑–∞–ø—Ä–æ—Å—ã:');
    apiRequests.forEach((req, index) => {
      const resp = apiResponses[index];
      console.log(`   ${req.method} ${req.url} ‚Üí ${resp?.status || 'pending'}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º —Ç–µ—Å—Ç–µ:', error);
  } finally {
    if (client) {
      client.release();
    }
    if (browser) {
      await browser.close();
    }
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testBrowserSession().then(() => {
  console.log('\nüèÅ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});