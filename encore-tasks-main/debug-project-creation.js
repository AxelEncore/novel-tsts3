const { Pool } = require('pg');
const fetch = require('node-fetch');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function debugProjectCreation() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\nüìä –ü—Ä–æ–µ–∫—Ç—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è:');
    const beforeResult = await pool.query('SELECT id, name, creator_id, created_at FROM projects ORDER BY created_at DESC LIMIT 5');
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${beforeResult.rows.length}`);
    beforeResult.rows.forEach((project, index) => {
      console.log(`   ${index + 1}. ${project.name} (ID: ${project.id}, Creator: ${project.creator_id})`);
    });
    
    // –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    const fs = require('fs');
    let authToken = '';
    try {
      authToken = fs.readFileSync('auth-token.txt', 'utf8').trim();
      console.log(`\nüîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞: ${authToken.length}`);
    } catch (error) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: 'axelencore@mail.ru',
          password: 'Ad580dc6axelencore'
        })
      });
      
      console.log(`üì• POST /api/auth/login - –°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
      const loginData = await loginResponse.json();
      console.log('üìù –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', JSON.stringify(loginData, null, 2));
      
      if (loginData.token) {
        authToken = loginData.token;
        fs.writeFileSync('auth-token.txt', authToken);
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(loginData)}`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    console.log('\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ API...');
    const createResponse = await fetch('http://localhost:3000/api/projects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify({
        name: `Debug Test Project ${Date.now()}`,
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è'
      })
    });
    
    console.log(`üì• POST /api/projects - –°—Ç–∞—Ç—É—Å: ${createResponse.status}`);
    const createData = await createResponse.json();
    console.log('üìù –û—Ç–≤–µ—Ç API:', JSON.stringify(createData, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\nüìä –ü—Ä–æ–µ–∫—Ç—ã –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API:');
    const afterApiResult = await pool.query('SELECT id, name, creator_id, created_at FROM projects ORDER BY created_at DESC LIMIT 5');
    console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${afterApiResult.rows.length}`);
    afterApiResult.rows.forEach((project, index) => {
      console.log(`   ${index + 1}. ${project.name} (ID: ${project.id}, Creator: ${project.creator_id})`);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ API
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API...');
    const getResponse = await fetch('http://localhost:3000/api/projects', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log(`üì• GET /api/projects - –°—Ç–∞—Ç—É—Å: ${getResponse.status}`);
    const getData = await getResponse.json();
    console.log('üìù –û—Ç–≤–µ—Ç API:', JSON.stringify(getData, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞...');
    const jwt = require('jsonwebtoken');
    try {
      const decoded = jwt.decode(authToken);
      console.log('üîç –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞:', JSON.stringify(decoded, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      const userResult = await pool.query('SELECT id, email, name FROM users WHERE id = $1', [decoded.userId]);
      if (userResult.rows.length > 0) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', userResult.rows[0]);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

debugProjectCreation();