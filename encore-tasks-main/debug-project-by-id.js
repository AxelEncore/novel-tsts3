const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

async function debugProjectById() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    const allProjects = await pool.query('SELECT * FROM projects ORDER BY created_at DESC LIMIT 3');
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–æ–µ–∫—Ç–∞:');
    allProjects.rows.forEach((project, index) => {
      console.log(`${index + 1}. ID: ${project.id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
      console.log(`   –°–æ–∑–¥–∞—Ç–µ–ª—å: ${project.creator_id}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${project.created_at}`);
      console.log('');
    });
    
    if (allProjects.rows.length > 0) {
      const testProjectId = allProjects.rows[0].id;
      console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å ID: ${testProjectId}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
      const directQuery = await pool.query('SELECT * FROM projects WHERE id = $1', [testProjectId]);
      console.log('\nüìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î:');
      console.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', directQuery.rows.length);
      if (directQuery.rows.length > 0) {
        console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', directQuery.rows[0]);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const accessQuery = await pool.query(
        `SELECT p.*, pm.user_id as member_id 
         FROM projects p 
         LEFT JOIN project_members pm ON p.id = pm.project_id 
         WHERE p.id = $1`,
        [testProjectId]
      );
      console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:');
      console.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', accessQuery.rows.length);
      accessQuery.rows.forEach((row, index) => {
        console.log(`${index + 1}. –ü—Ä–æ–µ–∫—Ç: ${row.name}, –°–æ–∑–¥–∞—Ç–µ–ª—å: ${row.creator_id}, –£—á–∞—Å—Ç–Ω–∏–∫: ${row.member_id || '–Ω–µ—Ç'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

debugProjectById();