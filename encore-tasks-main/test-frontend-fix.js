const fetch = require('node-fetch');

async function testFrontendFix() {
  const baseUrl = 'http://localhost:3000';
  
  try {
    console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');
    
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      })
    });
    
    if (loginResponse.status !== 200) {
      throw new Error(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: ${loginResponse.status}`);
    }
    
    const cookies = loginResponse.headers.get('set-cookie') || '';
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const getProjectsResponse = await fetch(`${baseUrl}/api/projects`, {
      headers: { 'Cookie': cookies }
    });
    
    const projectsData = await getProjectsResponse.json();
    
    if (!projectsData.success || !projectsData.data?.projects) {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API projects');
    }
    
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ API: ${projectsData.data.projects.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('\\n‚ûï –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
    
    const testProjectName = `Test Frontend Fix ${Date.now()}`;
    const createResponse = await fetch(`${baseUrl}/api/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      },
      body: JSON.stringify({
        name: testProjectName,
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞',
        color: '#00FF00',
        isPrivate: false
      })
    });
    
    const createData = await createResponse.json();
    
    if (!createData.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
    
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${createData.data.name}`);
    console.log(`üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: ${createData.data.id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    console.log('\\nüîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ...');
    
    const checkResponse = await fetch(`${baseUrl}/api/projects`, {
      headers: { 'Cookie': cookies }
    });
    
    const checkData = await checkResponse.json();
    const foundProject = checkData.data.projects.find(p => p.name === testProjectName);
    
    if (foundProject) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
      console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: ${checkData.data.projects.length}`);
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
    }
    
    console.log('\\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('\\nüìù –†–µ–∑—é–º–µ:');
    console.log('- API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã ‚úÖ');
    console.log('- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ'); 
    console.log('- –ü—Ä–æ–µ–∫—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ ‚úÖ');
    console.log('\\nüí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AppContext —Ä–∞–±–æ—Ç–∞—é—Ç:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (axelencore@mail.ru / Ad580dc6axelencore)');
    console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
    console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)');
    console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ AppContext –≤ –∫–æ–Ω—Å–æ–ª–∏');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    return false;
  }
}

testFrontendFix().then(success => {
  console.log(`\\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
  process.exit(success ? 0 : 1);
});