const { Pool } = require('pg');
const bcrypt = require('bcrypt');
require('dotenv').config();

async function checkUsers() {
  const pool = new Pool({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'encore_tasks',
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'postgres'
  });
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    client.release();
    
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResult = await pool.query('SELECT * FROM users ORDER BY created_at DESC');
    const users = usersResult.rows;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    if (users.length > 0) {
      console.log('\nüìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      users.forEach((user, index) => {
        console.log(`${index + 1}. Email: ${user.email}`);
        console.log(`   –ò–º—è: ${user.name}`);
        console.log(`   –†–æ–ª—å: ${user.role}`);
        console.log(`   ID: ${user.id}`);
        console.log(`   –ü–∞—Ä–æ–ª—å (—Ö–µ—à): ${user.password ? user.password.substring(0, 20) + '...' : '–ù–ï–¢'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        console.log('   ---');
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      
      console.log('\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      const hashedPassword = await bcrypt.hash('Ad580dc6axelencore', 10);
      
      const insertResult = await pool.query(`
        INSERT INTO users (name, email, password, role, created_at, updated_at)
        VALUES ($1, $2, $3, $4, NOW(), NOW())
        RETURNING id
      `, ['Admin', 'admin@example.com', hashedPassword, 'admin']);
      
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å ID:', insertResult.rows[0].id);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsResult = await pool.query('SELECT * FROM projects ORDER BY created_at DESC');
    const projects = projectsResult.rows;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    
    if (projects.length > 0) {
      console.log('\nüìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
      projects.forEach((project, index) => {
        console.log(`${index + 1}. –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
        console.log(`   ID: ${project.id}`);
        console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${project.owner_id || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${project.created_at}`);
        console.log('   ---');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

checkUsers().catch(console.error);