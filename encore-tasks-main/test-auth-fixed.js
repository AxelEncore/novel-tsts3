const { Client } = require('pg');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const client = new Client({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/encore_tasks'
});

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const API_BASE = 'http://localhost:3000/api';

async function testAuthenticationFlow() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');

    // 1. –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminEmail = 'axelencore@mail.ru';
    const adminPassword = 'Ad580dc6axelencore';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    let adminResult = await client.query('SELECT * FROM users WHERE email = $1', [adminEmail]);
    let adminId;
    
    if (adminResult.rows.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      adminId = adminResult.rows[0].id;
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', adminId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
       const hashedPassword = await bcrypt.hash(adminPassword, 10);
       await client.query(`
         UPDATE users SET password_hash = $1, role = 'admin', approval_status = 'approved', updated_at = NOW()
         WHERE id = $2
       `, [hashedPassword, adminId]);
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const hashedPassword = await bcrypt.hash(adminPassword, 10);
      adminId = uuidv4();
      
      await client.query(`
         INSERT INTO users (id, email, password_hash, name, role, approval_status, created_at, updated_at)
         VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
       `, [adminId, adminEmail, hashedPassword, 'Admin User', 'admin', 'approved']);
      
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', adminId);
    }

    // 2. –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const jwtPayload = {
      userId: adminId,
      email: adminEmail,
      role: 'admin'
    };
    const jwtToken = jwt.sign(jwtPayload, JWT_SECRET, { expiresIn: '24h' });
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');

    // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await client.query('DELETE FROM sessions WHERE user_id = $1', [adminId]);
    
    // 4. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å JWT —Ç–æ–∫–µ–Ω–æ–º
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    
    await client.query(`
      INSERT INTO sessions (id, user_id, token, expires_at, created_at, updated_at)
      VALUES ($1, $2, $3, $4, NOW(), NOW())
    `, [sessionId, adminId, jwtToken, expiresAt]);
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º');

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ /api/auth/me
    const meResponse = await fetch(`${API_BASE}/auth/me`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä /api/auth/me —Å—Ç–∞—Ç—É—Å:', meResponse.status);
    if (meResponse.ok) {
      const meData = await meResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:', meData.user?.email);
    } else {
      const errorData = await meResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ /api/auth/me:', errorData);
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      })
    });
    
    console.log('üìä /api/projects POST —Å—Ç–∞—Ç—É—Å:', projectResponse.status);
    if (projectResponse.ok) {
      const projectData = await projectResponse.json();
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', projectData.project?.id);
      
      // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
      const boardResponse = await fetch(`${API_BASE}/boards`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${jwtToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
          description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
          project_id: projectData.project.id
        })
      });
      
      console.log('üìä /api/boards POST —Å—Ç–∞—Ç—É—Å:', boardResponse.status);
      if (boardResponse.ok) {
        const boardData = await boardResponse.json();
        console.log('‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', boardData.board?.id);
      } else {
        const errorData = await boardResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', errorData);
      }
    } else {
      const errorData = await projectResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', errorData);
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    const usersResponse = await fetch(`${API_BASE}/users`, {
      headers: {
        'Authorization': `Bearer ${jwtToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä /api/users GET —Å—Ç–∞—Ç—É—Å:', usersResponse.status);
    if (usersResponse.ok) {
      const usersData = await usersResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', usersData.users?.length || 0);
    } else {
      const errorData = await usersResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', errorData);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAuthenticationFlow().catch(console.error);