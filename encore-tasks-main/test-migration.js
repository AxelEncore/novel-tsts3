const { Client } = require('pg');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');
const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DATABASE_URL = 'postgresql://postgres:postgres@localhost:5432/encore_tasks';
const JWT_SECRET = 'your-jwt-secret-key-development';
const API_BASE = 'http://localhost:3000/api';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USER = {
  id: 'a18e90af-3374-464a-a020-d0492838eb45',
  email: 'axelencore@mail.ru',
  role: 'admin',
  name: 'Admin User'
};

class MigrationTester {
  constructor() {
    this.client = new Client({ connectionString: DATABASE_URL });
    this.token = null;
    this.testResults = [];
  }

  async connect() {
    await this.client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async disconnect() {
    await this.client.end();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }

  generateToken() {
    this.token = jwt.sign(TEST_USER, JWT_SECRET, { expiresIn: '24h' });
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  }

  async createSession() {
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.client.query('DELETE FROM sessions WHERE user_id = $1', [TEST_USER.id]);
    
    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å JWT —Ç–æ–∫–µ–Ω–æ–º
    const query = `
      INSERT INTO sessions (id, user_id, token, expires_at, created_at, updated_at)
      VALUES ($1, $2, $3, $4, NOW(), NOW())
    `;
    
    await this.client.query(query, [sessionId, TEST_USER.id, this.token, expiresAt]);
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º');
  }

  async testDatabaseConnection() {
    try {
      const result = await this.client.query('SELECT NOW()');
      this.addResult('Database Connection', true, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      this.addResult('Database Connection', false, error.message);
      return false;
    }
  }

  async testDataIntegrity() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
      const tables = ['users', 'projects', 'boards', 'columns', 'tasks', 'sessions'];
      for (const table of tables) {
        const result = await this.client.query(`SELECT COUNT(*) FROM ${table}`);
        console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ ${table}: ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await this.client.query('SELECT id, email, role FROM users');
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.rows.length}`);
      users.rows.forEach(user => {
        console.log(`  - ${user.email} (${user.role})`);
      });
      
      this.addResult('Data Integrity', true, '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      return true;
    } catch (error) {
      this.addResult('Data Integrity', false, error.message);
      return false;
    }
  }

  async apiRequest(method, endpoint, data = null) {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.token}`
      }
    };
    
    if (data) {
      options.body = JSON.stringify(data);
    }
    
    const response = await fetch(`${API_BASE}${endpoint}`, options);
    const result = await response.json();
    
    return { status: response.status, data: result };
  }

  async testProjectManagement() {
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const projectData = {
        name: 'Test Project ' + Date.now(),
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏'
      };
      
      const createResponse = await this.apiRequest('POST', '/projects', projectData);
      
      if (createResponse.status === 201 && createResponse.data.success) {
        const projectId = createResponse.data.data.id;
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${projectId}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const listResponse = await this.apiRequest('GET', '/projects');
        if (listResponse.status === 200) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${listResponse.data.data.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
        }
        
        this.addResult('Project Management', true, '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return projectId;
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${JSON.stringify(createResponse.data)}`);
      }
    } catch (error) {
      this.addResult('Project Management', false, error.message);
      return null;
    }
  }

  async testBoardManagement(projectId) {
    if (!projectId) {
      this.addResult('Board Management', false, '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return null;
    }
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
      const boardData = {
        name: 'Test Board ' + Date.now(),
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        project_id: projectId
      };
      
      const createResponse = await this.apiRequest('POST', '/boards', boardData);
      
      if (createResponse.status === 201 && createResponse.data.success) {
        const boardId = createResponse.data.data.id;
        console.log(`‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${boardId}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        const listResponse = await this.apiRequest('GET', `/projects/${projectId}/boards`);
        if (listResponse.status === 200) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫: ${listResponse.data.data.length} –¥–æ—Å–æ–∫`);
        }
        
        this.addResult('Board Management', true, '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return boardId;
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏: ${JSON.stringify(createResponse.data)}`);
      }
    } catch (error) {
      this.addResult('Board Management', false, error.message);
      return null;
    }
  }

  async testColumnManagement(boardId) {
    if (!boardId) {
      this.addResult('Column Management', false, '–ù–µ—Ç –¥–æ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return null;
    }
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      const columnData = {
        name: 'Test Column ' + Date.now(),
        board_id: boardId,
        position: 1
      };
      
      const createResponse = await this.apiRequest('POST', '/columns', columnData);
      
      if (createResponse.status === 201 && createResponse.data.success) {
        const columnId = createResponse.data.data.id;
        console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${columnId}`);
        
        this.addResult('Column Management', true, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return columnId;
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: ${JSON.stringify(createResponse.data)}`);
      }
    } catch (error) {
      this.addResult('Column Management', false, error.message);
      return null;
    }
  }

  async testTaskManagement(columnId) {
    if (!columnId) {
      this.addResult('Task Management', false, '–ù–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return null;
    }
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const taskData = {
        title: 'Test Task ' + Date.now(),
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        column_id: columnId,
        position: 1,
        priority: 'medium'
      };
      
      const createResponse = await this.apiRequest('POST', '/tasks', taskData);
      
      if (createResponse.status === 201 && createResponse.data.success) {
        const taskId = createResponse.data.data.id;
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${taskId}`);
        
        this.addResult('Task Management', true, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return taskId;
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${JSON.stringify(createResponse.data)}`);
      }
    } catch (error) {
      this.addResult('Task Management', false, error.message);
      return null;
    }
  }

  async testUserManagement() {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const listResponse = await this.apiRequest('GET', '/users');
      
      if (listResponse.status === 200) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${listResponse.data.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        this.addResult('User Management', true, '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${JSON.stringify(listResponse.data)}`);
      }
    } catch (error) {
      this.addResult('User Management', false, error.message);
      return false;
    }
  }

  addResult(test, success, message) {
    this.testResults.push({ test, success, message, timestamp: new Date() });
  }

  printResults() {
    console.log('\n' + '='.repeat(60));
    console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò');
    console.log('='.repeat(60));
    
    let passed = 0;
    let failed = 0;
    
    this.testResults.forEach(result => {
      const status = result.success ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
      console.log(`${status} ${result.test}: ${result.message}`);
      
      if (result.success) passed++;
      else failed++;
    });
    
    console.log('\n' + '-'.repeat(60));
    console.log(`üìä –ò–¢–û–ì–û: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
    
    if (failed === 0) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ PostgreSQL –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.');
    }
    
    console.log('='.repeat(60));
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL\n');
    
    try {
      await this.connect();
      this.generateToken();
      await this.createSession();
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.testDatabaseConnection();
      await this.testDataIntegrity();
      
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
      const projectId = await this.testProjectManagement();
      const boardId = await this.testBoardManagement(projectId);
      const columnId = await this.testColumnManagement(boardId);
      const taskId = await this.testTaskManagement(columnId);
      
      await this.testUserManagement();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      this.addResult('Critical Error', false, error.message);
    } finally {
      await this.disconnect();
      this.printResults();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const tester = new MigrationTester();
  tester.runAllTests().catch(console.error);
}

module.exports = MigrationTester;