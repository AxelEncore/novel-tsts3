const { Pool } = require('pg');
const jwt = require('jsonwebtoken');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

// JWT —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const JWT_SECRETS = [
  'your-jwt-secret-key-development',
  'your-secret-key',
  'development-secret',
  'encore-tasks-secret'
];

async function testJWTSecret() {
  try {
    console.log('=== –¢–µ—Å—Ç JWT —Å–µ–∫—Ä–µ—Ç–æ–≤ ===');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const sessionResult = await pool.query(
      `SELECT s.token, s.user_id, u.email, u.role 
       FROM sessions s 
       JOIN users u ON s.user_id = u.id 
       WHERE s.expires_at > NOW() 
       ORDER BY s.created_at DESC 
       LIMIT 1`
    );
    
    if (sessionResult.rows.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π');
      return;
    }
    
    const session = sessionResult.rows[0];
    console.log('–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', {
      user_id: session.user_id,
      email: session.email,
      role: session.role,
      token_preview: session.token.substring(0, 50) + '...'
    });
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ JWT —Å–µ–∫—Ä–µ—Ç—ã
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Å–µ–∫—Ä–µ—Ç–æ–≤:');
    let validSecret = null;
    let decodedToken = null;
    
    for (const secret of JWT_SECRETS) {
      try {
        const decoded = jwt.verify(session.token, secret);
        console.log(`‚úÖ –°–µ–∫—Ä–µ—Ç "${secret}" —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
        console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', {
          userId: decoded.userId,
          email: decoded.email,
          role: decoded.role,
          iat: new Date(decoded.iat * 1000).toISOString(),
          exp: new Date(decoded.exp * 1000).toISOString()
        });
        validSecret = secret;
        decodedToken = decoded;
        break;
      } catch (error) {
        console.log(`‚ùå –°–µ–∫—Ä–µ—Ç "${secret}" –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`);
      }
    }
    
    if (!validSecret) {
      console.log('\n‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª!');
      console.log('–ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å —Ç–µ–∫—É—â–∏–º —Å–µ–∫—Ä–µ—Ç–æ–º...');
      
      // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
      const currentSecret = 'your-jwt-secret-key-development';
      const newTokenPayload = {
        userId: session.user_id,
        email: session.email,
        role: session.role
      };
      
      const newToken = jwt.sign(newTokenPayload, currentSecret, { expiresIn: '7d' });
      console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:');
      console.log('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', newToken.substring(0, 50) + '...');
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updateResult = await pool.query(
        'UPDATE sessions SET token = $1, expires_at = $2 WHERE user_id = $3',
        [newToken, new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), session.user_id]
      );
      
      console.log('–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', updateResult.rowCount > 0 ? '‚úÖ' : '‚ùå');
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      try {
        const verifiedNew = jwt.verify(newToken, currentSecret);
        console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω:', {
          userId: verifiedNew.userId,
          email: verifiedNew.email,
          role: verifiedNew.role
        });
        
        console.log('\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        console.log('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:', newToken);
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error.message);
      }
      
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Å–µ–∫—Ä–µ—Ç: "${validSecret}"`);
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ .env.local –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JWT —Å–µ–∫—Ä–µ—Ç–æ–≤:', error);
  } finally {
    await pool.end();
  }
}

testJWTSecret();