const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

async function testBoardCreation() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ PostgreSQL...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
    const projectsResult = await pool.query(
      'SELECT * FROM projects LIMIT 1'
    );
    
    if (projectsResult.rows.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const project = projectsResult.rows[0];
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç:', project.name, 'ID:', project.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersResult = await pool.query(
      'SELECT * FROM users LIMIT 1'
    );
    
    if (usersResult.rows.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const user = usersResult.rows[0];
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.username, 'ID:', user.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    console.log('üî® –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ PostgreSQL...');
    
    const boardData = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ Direct SQL',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ SQL',
      project_id: project.id,
      created_by: user.id,
      color: '#3B82F6'
    };
    
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', JSON.stringify(boardData, null, 2));
    
    const createResult = await pool.query(
      `INSERT INTO boards (name, description, project_id, created_by, color, created_at, updated_at) 
       VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) 
       RETURNING *`,
      [boardData.name, boardData.description, boardData.project_id, boardData.created_by, boardData.color]
    );
    
    const newBoard = createResult.rows[0];
    
    console.log('‚úÖ –î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω–∞—è –¥–æ—Å–∫–∞:', JSON.stringify(newBoard, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å
    const boardFromDb = await pool.query(
      'SELECT * FROM boards WHERE id = $1',
      [newBoard.id]
    );
    
    console.log('üîç –î–æ—Å–∫–∞ –∏–∑ –ë–î:', JSON.stringify(boardFromDb.rows[0], null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:');
    console.error('üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('üìÑ –°—Ç–µ–∫:', error.stack);
    
    if (error.code) {
      console.error('üìÑ –ö–æ–¥ –æ—à–∏–±–∫–∏ PostgreSQL:', error.code);
    }
    if (error.detail) {
      console.error('üìÑ –î–µ—Ç–∞–ª–∏:', error.detail);
    }
    if (error.constraint) {
      console.error('üìÑ –ù–∞—Ä—É—à–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:', error.constraint);
    }
  } finally {
    await pool.end();
  }
}

testBoardCreation();