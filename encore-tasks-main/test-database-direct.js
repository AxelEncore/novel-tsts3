const { Pool } = require('pg');
const jwt = require('jsonwebtoken');

// ะะฐัััะพะนะบะธ ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

const JWT_SECRET = 'your-secret-key-here';

// ะคัะฝะบัะธั ะดะปั ัะพะทะดะฐะฝะธั ัะพะบะตะฝะฐ
function createToken(userId, email) {
  return jwt.sign(
    {
      userId,
      email,
      timestamp: Date.now(),
      random: Math.random().toString(36).substring(7)
    },
    JWT_SECRET,
    { expiresIn: '7d' }
  );
}

// ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฑะฐะทั ะดะฐะฝะฝัั
async function checkDatabase() {
  try {
    console.log('๐ ะัะพะฒะตัะบะฐ ะฑะฐะทั ะดะฐะฝะฝัั ะฝะฐะฟััะผัั...');
    
    // 1. ะัะพะฒะตััะตะผ ะฟะพะดะบะปััะตะฝะธะต ะบ ะะ
    const client = await pool.connect();
    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ ะฑะฐะทะต ะดะฐะฝะฝัั ัััะฐะฝะพะฒะปะตะฝะพ');
    
    // 2. ะัะพะฒะตััะตะผ ัััะตััะฒัััะธะต ะฟัะพะตะบัั
    const existingProjects = await client.query('SELECT * FROM projects ORDER BY created_at DESC LIMIT 5');
    console.log(`๐ ะะฐะนะดะตะฝะพ ะฟัะพะตะบัะพะฒ ะฒ ะะ (ะฟะพัะปะตะดะฝะธะต 5): ${existingProjects.rows.length}`);
    
    if (existingProjects.rows.length > 0) {
      console.log('\n๐ ะะพัะปะตะดะฝะธะต ะฟัะพะตะบัั:');
      existingProjects.rows.forEach((project, index) => {
        console.log(`   ${index + 1}. ${project.name} (ID: ${project.id}, Creator: ${project.creator_id})`);
        console.log(`      ะกะพะทะดะฐะฝ: ${project.created_at}`);
      });
    }
    
    // 3. ะะพะปััะฐะตะผ ะฟะพะปัะทะพะฒะฐัะตะปั axelencore@mail.ru
    const userResult = await client.query('SELECT * FROM users WHERE email = $1', ['axelencore@mail.ru']);
    if (userResult.rows.length === 0) {
      console.log('โ ะะพะปัะทะพะฒะฐัะตะปั axelencore@mail.ru ะฝะต ะฝะฐะนะดะตะฝ');
      client.release();
      return;
    }
    
    const user = userResult.rows[0];
    console.log(`\n๐ค ะะฐะนะดะตะฝ ะฟะพะปัะทะพะฒะฐัะตะปั: ${user.email} (ID: ${user.id})`);
    
    // 4. ะกะพะทะดะฐะตะผ ะฝะพะฒัะน ะฟัะพะตะบั ะฝะฐะฟััะผัั ะฒ ะะ
    const projectName = `ะขะตัั ะะ ${new Date().toLocaleTimeString()}`;
    console.log(`\n๐ ะกะพะทะดะฐะฝะธะต ะฝะพะฒะพะณะพ ะฟัะพะตะบัะฐ: ${projectName}`);
    
    const createResult = await client.query(
      `INSERT INTO projects (name, description, creator_id, color, icon, created_at, updated_at) 
       VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) 
       RETURNING *`,
      [projectName, 'ะขะตััะพะฒัะน ะฟัะพะตะบั ะดะปั ะฟัะพะฒะตัะบะธ ะะ', user.id, '#3B82F6', '๐']
    );
    
    const newProject = createResult.rows[0];
    console.log('โ ะัะพะตะบั ัะพะทะดะฐะฝ ะฒ ะะ:', {
      id: newProject.id,
      name: newProject.name,
      creator_id: newProject.creator_id
    });
    
    // 5. ะัะพะฒะตััะตะผ, ััะพ ะฟัะพะตะบั ะดะตะนััะฒะธัะตะปัะฝะพ ัะพััะฐะฝะธะปัั
    const verifyResult = await client.query('SELECT * FROM projects WHERE id = $1', [newProject.id]);
    if (verifyResult.rows.length > 0) {
      console.log('โ ะัะพะตะบั ะฟะพะดัะฒะตัะถะดะตะฝ ะฒ ะะ');
    } else {
      console.log('โ ะัะพะตะบั ะฝะต ะฝะฐะนะดะตะฝ ะฒ ะะ ะฟะพัะปะต ัะพะทะดะฐะฝะธั');
    }
    
    // 6. ะัะพะฒะตััะตะผ ะฟัะพะตะบัั ะฟะพะปัะทะพะฒะฐัะตะปั ัะตัะตะท SQL ะทะฐะฟัะพั ะบะฐะบ ะฒ API
    const userProjectsResult = await client.query(
      `SELECT DISTINCT p.* FROM projects p 
       LEFT JOIN project_members pm ON p.id = pm.project_id 
       WHERE (p.creator_id = $1 OR pm.user_id = $1) 
       ORDER BY p.created_at DESC
       LIMIT 10`,
      [user.id]
    );
    
    console.log(`\n๐ ะัะพะตะบัั ะฟะพะปัะทะพะฒะฐัะตะปั ัะตัะตะท SQL (ะฟะพัะปะตะดะฝะธะต 10): ${userProjectsResult.rows.length}`);
    userProjectsResult.rows.forEach((project, index) => {
      console.log(`   ${index + 1}. ${project.name} (ID: ${project.id})`);
    });
    
    // 7. ะขะตััะธััะตะผ API endpoint ั ัะพะบะตะฝะพะผ
    const token = createToken(user.id, user.email);
    console.log(`\n๐ ะกะพะทะดะฐะฝ ัะพะบะตะฝ ะดะปั API: ${token.substring(0, 50)}...`);
    
    const apiResponse = await fetch('http://localhost:3000/api/projects', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`\n๐ API ะพัะฒะตั: ${apiResponse.status}`);
    
    if (apiResponse.ok) {
      const apiData = await apiResponse.json();
      console.log('โ API ัะฐะฑะพัะฐะตั ะบะพััะตะบัะฝะพ');
      console.log(`๐ ะัะพะตะบัะพะฒ ัะตัะตะท API: ${apiData.data?.projects?.length || 0}`);
      
      if (apiData.data?.projects) {
        console.log('\n๐ ะัะพะตะบัั ัะตัะตะท API (ะฟะตัะฒัะต 5):');
        apiData.data.projects.slice(0, 5).forEach((project, index) => {
          console.log(`   ${index + 1}. ${project.name} (ID: ${project.id})`);
        });
        
        // ะัะพะฒะตััะตะผ, ะตััั ะปะธ ะฝะฐั ะฝะพะฒัะน ะฟัะพะตะบั ะฒ API ะพัะฒะตัะต
        const foundNewProject = apiData.data.projects.find(p => p.id === newProject.id);
        if (foundNewProject) {
          console.log('\nโ ะะพะฒัะน ะฟัะพะตะบั ะฝะฐะนะดะตะฝ ะฒ API ะพัะฒะตัะต!');
        } else {
          console.log('\nโ ะะพะฒัะน ะฟัะพะตะบั ะะ ะฝะฐะนะดะตะฝ ะฒ API ะพัะฒะตัะต!');
        }
      }
    } else {
      const errorData = await apiResponse.text();
      console.log('โ API ะพัะธะฑะบะฐ:', errorData);
    }
    
    client.release();
    
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะฟัะพะฒะตัะบะต ะฑะฐะทั ะดะฐะฝะฝัั:', error);
  } finally {
    await pool.end();
  }
}

// ะะฐะฟััะบ ะฟัะพะฒะตัะบะธ
checkDatabase().then(() => {
  console.log('\n๐ ะัะพะฒะตัะบะฐ ะทะฐะฒะตััะตะฝะฐ');
  process.exit(0);
}).catch(error => {
  console.error('๐ฅ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error);
  process.exit(1);
});