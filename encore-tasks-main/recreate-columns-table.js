const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD
});

async function recreateColumnsTable() {
  try {
    console.log('üîç –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã columns...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    console.log('üîó –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...');
    await pool.query('ALTER TABLE tasks DROP CONSTRAINT IF EXISTS tasks_column_id_fkey');
    console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    
    // –û—á–∏—â–∞–µ–º column_id –≤ tasks
    console.log('üßπ –û—á–∏—â–∞–µ–º column_id –≤ —Ç–∞–±–ª–∏—Ü–µ tasks...');
    await pool.query('UPDATE tasks SET column_id = NULL');
    console.log('‚úÖ column_id –æ—á–∏—â–µ–Ω');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã columns
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã columns...');
    await pool.query('DROP TABLE IF EXISTS board_columns CASCADE');
    await pool.query('DROP TABLE IF EXISTS columns CASCADE');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É columns (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è)
    console.log('‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É columns...');
    await pool.query(`
      CREATE TABLE columns (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        board_id UUID NOT NULL REFERENCES boards(id) ON DELETE CASCADE,
        position INTEGER DEFAULT 0,
        color VARCHAR(7),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ columns —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìä –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    await pool.query('CREATE INDEX idx_columns_board_id ON columns(board_id)');
    await pool.query('CREATE INDEX idx_columns_position ON columns(position)');
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –æ–±—Ä–∞—Ç–Ω–æ
    console.log('üîó –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞...');
    await pool.query('ALTER TABLE tasks ADD CONSTRAINT tasks_column_id_fkey FOREIGN KEY (column_id) REFERENCES columns(id)');
    console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã columns:');
    const result = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'columns' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    
    result.rows.forEach(row => {
      console.log(`- ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default || 'none'})`);
    });
    
    console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ columns —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã columns:', error.message);
  } finally {
    await pool.end();
  }
}

recreateColumnsTable();