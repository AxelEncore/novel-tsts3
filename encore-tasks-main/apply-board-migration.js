const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

async function applyMigration() {
  try {
    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã boards...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ color
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ color...');
    await pool.query(`ALTER TABLE boards ADD COLUMN IF NOT EXISTS color VARCHAR(7) DEFAULT '#3B82F6'`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ created_by
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ created_by...');
    await pool.query(`ALTER TABLE boards ADD COLUMN IF NOT EXISTS created_by UUID REFERENCES users(id)`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...');
    const updateResult = await pool.query(`
      UPDATE boards 
      SET created_by = (
        SELECT id FROM users LIMIT 1
      ) 
      WHERE created_by IS NULL
    `);
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updateResult.rowCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
    const structureResult = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'boards' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `);
    
    console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã boards:');
    structureResult.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default})`);
    });
    
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  } finally {
    await pool.end();
  }
}

applyMigration();