const { Client } = require('pg');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const fetch = require('node-fetch');
const { v4: uuidv4 } = require('uuid');

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const BASE_URL = 'http://localhost:3000';

const client = new Client({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/encore_tasks'
});

class CompleteAuthTest {
  constructor() {
    this.csrfToken = null;
    this.authCookie = null;
    this.adminId = null;
  }

  async setup() {
    try {
      await client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
      
      // –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminEmail = 'axelencore@mail.ru';
      const adminPassword = 'Ad580dc6axelencore';
      
      let adminResult = await client.query('SELECT id FROM users WHERE email = $1', [adminEmail]);
      
      if (adminResult.rows.length > 0) {
        this.adminId = adminResult.rows[0].id;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', this.adminId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(adminPassword, 10);
        await client.query(`
          UPDATE users SET password_hash = $1, role = 'admin', approval_status = 'approved', updated_at = NOW()
          WHERE id = $2
        `, [hashedPassword, this.adminId]);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        this.adminId = uuidv4();
        const hashedPassword = await bcrypt.hash(adminPassword, 10);
        
        await client.query(`
          INSERT INTO users (id, email, password_hash, name, role, approval_status, created_at, updated_at)
          VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
        `, [this.adminId, adminEmail, hashedPassword, 'Admin User', 'admin', 'approved']);
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:', this.adminId);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
      throw error;
    }
  }

  async getCSRFToken() {
    try {
      console.log('\nüîí –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω...');
      const response = await fetch(`${BASE_URL}/api/csrf`);
      
      if (!response.ok) {
        throw new Error(`CSRF request failed: ${response.status}`);
      }
      
      const data = await response.json();
      this.csrfToken = data.csrfToken;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º cookie –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const setCookieHeader = response.headers.get('set-cookie');
      if (setCookieHeader) {
        console.log('‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', this.csrfToken.substring(0, 10) + '...');
        console.log('‚úÖ CSRF cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return setCookieHeader;
      } else {
        throw new Error('CSRF cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞:', error.message);
      throw error;
    }
  }

  async login() {
    try {
      console.log('\nüîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ API...');
      
      const csrfCookie = await this.getCSRFToken();
      
      const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': csrfCookie
        },
        body: JSON.stringify({
          email: 'axelencore@mail.ru',
          password: 'Ad580dc6axelencore'
        })
      });
      
      console.log('üìä Login —Å—Ç–∞—Ç—É—Å:', loginResponse.status);
      
      if (!loginResponse.ok) {
        const errorText = await loginResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', errorText);
        throw new Error(`Login failed: ${loginResponse.status}`);
      }
      
      const loginData = await loginResponse.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', loginData.user?.email);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º auth cookie
      const authCookieHeader = loginResponse.headers.get('set-cookie');
      if (authCookieHeader) {
        this.authCookie = authCookieHeader;
        console.log('‚úÖ Auth cookie –ø–æ–ª—É—á–µ–Ω');
      }
      
      return loginData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
      throw error;
    }
  }

  async testAuthenticatedAPI() {
    try {
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API...');
      
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
      const meResponse = await fetch(`${BASE_URL}/api/auth/me`, {
        headers: {
          'Cookie': this.authCookie
        }
      });
      
      console.log('üìä /api/auth/me —Å—Ç–∞—Ç—É—Å:', meResponse.status);
      if (meResponse.ok) {
        const meData = await meResponse.json();
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', meData.email);
      } else {
        const errorText = await meResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', errorText);
      }
      
      // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const projectResponse = await fetch(`${BASE_URL}/api/projects`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-csrf-token': this.csrfToken,
          'Cookie': this.authCookie
        },
        body: JSON.stringify({
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
          description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏'
        })
      });
      
      console.log('üìä /api/projects POST —Å—Ç–∞—Ç—É—Å:', projectResponse.status);
      if (projectResponse.ok) {
        const projectData = await projectResponse.json();
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', projectData.name);
        return projectData.id;
      } else {
        const errorText = await projectResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', errorText);
      }
      
      // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResponse = await fetch(`${BASE_URL}/api/users`, {
        headers: {
          'Cookie': this.authCookie
        }
      });
      
      console.log('üìä /api/users GET —Å—Ç–∞—Ç—É—Å:', usersResponse.status);
      if (usersResponse.ok) {
        const usersData = await usersResponse.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', usersData.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      } else {
        const errorText = await usersResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', errorText);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    }
  }

  async cleanup() {
    try {
      await client.end();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
    }
  }
}

async function runCompleteTest() {
  const test = new CompleteAuthTest();
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    await test.setup();
    await test.login();
    await test.testAuthenticatedAPI();
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    await test.cleanup();
  }
}

runCompleteTest();