const fetch = require('node-fetch');
const fs = require('fs');

const BASE_URL = 'http://localhost:3000';
const TOKEN_FILE = 'auth_token.txt';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
function getAuthToken() {
  try {
    return fs.readFileSync(TOKEN_FILE, 'utf8').trim();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(endpoint, options = {}) {
  const token = getAuthToken();
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  const url = `${BASE_URL}${endpoint}`;
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    }
  };

  const response = await fetch(url, { ...defaultOptions, ...options });
  const data = await response.json();

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${JSON.stringify(data)}`);
  }

  return { status: response.status, data };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runComprehensiveTest() {
  console.log('=== –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===\n');

  let projectId, boardId, columnId, taskId;

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üèóÔ∏è –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectResponse = await makeRequest('/api/projects/create-simple', {
      method: 'POST',
      body: JSON.stringify({
        name: `–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç ${Date.now()}`,
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π'
      })
    });
    
    projectId = projectResponse.data.data.project.id;
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${projectResponse.data.data.project.name}`);
    console.log(`   ID: ${projectId}\n`);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    console.log('üìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
    const boardResponse = await makeRequest('/api/boards', {
      method: 'POST',
      body: JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
        description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        project_id: projectId
      })
    });
    
    boardId = boardResponse.data.data.id;
    console.log(`‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${boardResponse.data.data.name}`);
    console.log(`   ID: ${boardId}\n`);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    console.log('üìä –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫...');
    const columns = [
      { name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', position: 1 },
      { name: '–í —Ä–∞–±–æ—Ç–µ', position: 2 },
      { name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', position: 3 }
    ];

    const columnResponse = await makeRequest('/api/columns', {
      method: 'POST',
      body: JSON.stringify({
        name: columns[0].name,
        board_id: boardId,
        position: columns[0].position
      })
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
     if (!columnResponse.data || !columnResponse.data.column || (!columnResponse.data.column.name && !columnResponse.data.column.title)) {
       throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: ${JSON.stringify(columnResponse.data)}`);
     }
     
     const columnName = columnResponse.data.column.name || columnResponse.data.column.title;
     console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${columnName}`);
    const createdColumns = [columnResponse.data.column];
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    for (let i = 1; i < 3; i++) {
      const additionalColumnResponse = await makeRequest('/api/columns', {
        method: 'POST',
        body: JSON.stringify({
          name: columns[i].name,
          board_id: boardId,
          position: columns[i].position
        })
      });
      
      if (!additionalColumnResponse.data || !additionalColumnResponse.data.column || (!additionalColumnResponse.data.column.name && !additionalColumnResponse.data.column.title)) {
         throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: ${JSON.stringify(additionalColumnResponse.data)}`);
       }
       
       const additionalColumnName = additionalColumnResponse.data.column.name || additionalColumnResponse.data.column.title;
       console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${additionalColumnName}`);
      createdColumns.push(additionalColumnResponse.data.column);
    }
    
    columnId = createdColumns[0].id;
    console.log(`   –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: ${createdColumns.length}\n`);

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    console.log('üìù –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
    const tasks = [
      { 
        title: '–ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞', 
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏',
        priority: 'medium',
        column_id: createdColumns[0].id 
      },
      { 
        title: '–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞', 
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏',
        priority: 'high',
        column_id: createdColumns[1].id 
      },
      { 
        title: '–¢—Ä–µ—Ç—å—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞', 
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏',
        priority: 'low',
        column_id: createdColumns[2].id 
      }
    ];

    const createdTasks = [];
    for (const task of tasks) {
      const taskResponse = await makeRequest('/api/tasks', {
        method: 'POST',
        body: JSON.stringify(task)
      });
      
      createdTasks.push(taskResponse.data.data);
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${taskResponse.data.data.title}`);
    }
    
    taskId = createdTasks[0].id;
    console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${createdTasks.length}\n`);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const getProjectResponse = await makeRequest(`/api/projects/${projectId}`);
    const retrievedProject = getProjectResponse.data?.data?.project;
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω:', retrievedProject?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    const getBoardResponse = await makeRequest(`/api/boards/${boardId}`);
    console.log(`‚úÖ –î–æ—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${getBoardResponse.data.data.name}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    try {
      const getTaskResponse = await makeRequest(`/api/tasks/${taskId}`);
      console.log('DEBUG: –û—Ç–≤–µ—Ç API –∑–∞–¥–∞—á–∏:', JSON.stringify(getTaskResponse, null, 2));
      const retrievedTask = getTaskResponse; // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞:', retrievedTask?.title || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
      console.log('ID –∑–∞–¥–∞—á–∏:', retrievedTask?.id || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
    }
    console.log();

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const updateProjectResponse = await makeRequest(`/api/projects/${projectId}`, {
      method: 'PUT',
      body: JSON.stringify({
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç',
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
      })
    });
    const updatedProject = updateProjectResponse.data?.data?.project;
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedProject?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const updateTaskResponse = await makeRequest(`/api/tasks/${taskId}`, {
      method: 'PATCH',
      body: JSON.stringify({
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
        status: 'in_progress'
      })
    });
    const updatedTask = updateTaskResponse;
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedTask?.title || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    console.log();

    // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      const statsResponse = await makeRequest('/api/dashboard/stats');
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log(`   –ü—Ä–æ–µ–∫—Ç–æ–≤: ${statsResponse.data.data.projects}`);
      console.log(`   –î–æ—Å–æ–∫: ${statsResponse.data.data.boards}`);
      console.log(`   –ó–∞–¥–∞—á: ${statsResponse.data.data.tasks}\n`);
    } catch (error) {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)\n');
    }

    console.log('üéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${projectId}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ—Å–∫–∞: ${boardId}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${createdColumns.length}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${createdTasks.length}`);
    console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ PostgreSQL –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í –ö–û–ú–ü–õ–ï–ö–°–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    
    if (error.message.includes('HTTP')) {
      console.error('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('- API endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
      console.error('- –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.error('- –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
      console.error('- –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runComprehensiveTest();
}

module.exports = { runComprehensiveTest };